import{_ as t,o as e,c as n,V as r}from"./chunks/framework.JWZrZsxi.js";const u=JSON.parse('{"title":"Config","description":"","frontmatter":{"title":"Config"},"headers":[],"relativePath":"config/index.md","filePath":"config/index.md","lastUpdated":1707862450000}'),a={name:"config/index.md"},l=r('<h1 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-label="Permalink to &quot;Introduction&quot;">​</a></h1><p>MongoCamp can be configured by using the environment variables of docker or by changing the values in your own MongoDb.</p><p>But there are also <a href="./environment.html">some variables</a> that can only overridden by using the docker (or you system environment variables if you run MongoCamp Server locally).</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Configuration over environment variable always wins. If you changed the value of a config in you database the system checks that there is an env variable and reset the value in you database.</p></div><h2 id="allowed-types-and-how-we-store-them-to-database" tabindex="-1">Allowed Types and how we store them to Database <a class="header-anchor" href="#allowed-types-and-how-we-store-them-to-database" aria-label="Permalink to &quot;Allowed Types and how we store them to Database&quot;">​</a></h2><table><thead><tr><th style="text-align:center;">Type</th><th style="text-align:center;">Stored as in MongoDb</th></tr></thead><tbody><tr><td style="text-align:center;">Boolean</td><td style="text-align:center;">bool</td></tr><tr><td style="text-align:center;">String</td><td style="text-align:center;">string</td></tr><tr><td style="text-align:center;">Double</td><td style="text-align:center;">double</td></tr><tr><td style="text-align:center;">Long</td><td style="text-align:center;">long</td></tr><tr><td style="text-align:center;">Int</td><td style="text-align:center;">long</td></tr><tr><td style="text-align:center;">Duration</td><td style="text-align:center;">string</td></tr><tr><td style="text-align:center;">Option[Boolean]</td><td style="text-align:center;">bool</td></tr><tr><td style="text-align:center;">Option[String]</td><td style="text-align:center;">string</td></tr><tr><td style="text-align:center;">Option[Double]</td><td style="text-align:center;">double</td></tr><tr><td style="text-align:center;">Option[Long]</td><td style="text-align:center;">long</td></tr><tr><td style="text-align:center;">Option[Int]</td><td style="text-align:center;">long</td></tr><tr><td style="text-align:center;">Option[Duration]</td><td style="text-align:center;">string</td></tr><tr><td style="text-align:center;">List[Boolean]</td><td style="text-align:center;">[bool]</td></tr><tr><td style="text-align:center;">List[String]</td><td style="text-align:center;">[string]</td></tr><tr><td style="text-align:center;">List[Double]</td><td style="text-align:center;">[double]</td></tr><tr><td style="text-align:center;">List[Long]</td><td style="text-align:center;">[long]</td></tr><tr><td style="text-align:center;">List[Int]</td><td style="text-align:center;">[long]</td></tr><tr><td style="text-align:center;">List[Duration]</td><td style="text-align:center;">[string]</td></tr></tbody></table>',6),o=[l];function d(i,s,c,g,y,x){return e(),n("div",null,o)}const b=t(a,[["render",d]]);export{u as __pageData,b as default};

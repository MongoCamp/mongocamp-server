[
  {
    "name": "ch.qos.logback.classic.AsyncAppender",
    "allDeclaredConstructors": true,
    "allPublicConstructors": true,
    "allDeclaredMethods": true,
    "allPublicMethods": true,
    "allDeclaredFields": true,
    "allPublicFields": true,
    "allDeclaredClasses": true,
    "allPublicClasses": true
  },
  {
    "name": "ch.qos.logback.classic.encoder.PatternLayoutEncoder",
    "allDeclaredConstructors": true,
    "allPublicConstructors": true,
    "allDeclaredMethods": true,
    "allPublicMethods": true,
    "allDeclaredFields": true,
    "allPublicFields": true,
    "allDeclaredClasses": true,
    "allPublicClasses": true
  },
  {
    "name": "ch.qos.logback.classic.pattern.DateConverter",
    "allDeclaredConstructors": true,
    "allPublicConstructors": true,
    "allDeclaredMethods": true,
    "allPublicMethods": true,
    "allDeclaredFields": true,
    "allPublicFields": true,
    "allDeclaredClasses": true,
    "allPublicClasses": true
  },
  {
    "name": "ch.qos.logback.classic.pattern.LevelConverter",
    "allDeclaredConstructors": true,
    "allPublicConstructors": true,
    "allDeclaredMethods": true,
    "allPublicMethods": true,
    "allDeclaredFields": true,
    "allPublicFields": true,
    "allDeclaredClasses": true,
    "allPublicClasses": true
  },
  {
    "name": "ch.qos.logback.classic.pattern.LineSeparatorConverter",
    "allDeclaredConstructors": true,
    "allPublicConstructors": true,
    "allDeclaredMethods": true,
    "allPublicMethods": true,
    "allDeclaredFields": true,
    "allPublicFields": true,
    "allDeclaredClasses": true,
    "allPublicClasses": true
  },
  {
    "name": "ch.qos.logback.classic.pattern.LoggerConverter",
    "allDeclaredConstructors": true,
    "allPublicConstructors": true,
    "allDeclaredMethods": true,
    "allPublicMethods": true,
    "allDeclaredFields": true,
    "allPublicFields": true,
    "allDeclaredClasses": true,
    "allPublicClasses": true
  },
  {
    "name": "ch.qos.logback.classic.pattern.MessageConverter",
    "allDeclaredConstructors": true,
    "allPublicConstructors": true,
    "allDeclaredMethods": true,
    "allPublicMethods": true,
    "allDeclaredFields": true,
    "allPublicFields": true,
    "allDeclaredClasses": true,
    "allPublicClasses": true
  },
  {
    "name": "ch.qos.logback.classic.pattern.ThreadConverter",
    "allDeclaredConstructors": true,
    "allPublicConstructors": true,
    "allDeclaredMethods": true,
    "allPublicMethods": true,
    "allDeclaredFields": true,
    "allPublicFields": true,
    "allDeclaredClasses": true,
    "allPublicClasses": true
  },
  {
    "name": "ch.qos.logback.core.ConsoleAppender",
    "allDeclaredConstructors": true,
    "allPublicConstructors": true,
    "allDeclaredMethods": true,
    "allPublicMethods": true,
    "allDeclaredFields": true,
    "allPublicFields": true,
    "allDeclaredClasses": true,
    "allPublicClasses": true
  },
  {
    "name": "ch.qos.logback.core.FileAppender",
    "allDeclaredConstructors": true,
    "allPublicConstructors": true,
    "allDeclaredMethods": true,
    "allPublicMethods": true,
    "allDeclaredFields": true,
    "allPublicFields": true,
    "allDeclaredClasses": true,
    "allPublicClasses": true
  },
  {
    "name": "ch.qos.logback.core.status.NopStatusListener",
    "allDeclaredConstructors": true,
    "allPublicConstructors": true,
    "allDeclaredMethods": true,
    "allPublicMethods": true,
    "allDeclaredFields": true,
    "allPublicFields": true,
    "allDeclaredClasses": true,
    "allPublicClasses": true
  },
  {
    "name": "sun.misc.Unsafe",
    "fields": [
      {
        "name": "theUnsafe",
        "allowUnsafeAccess": true
      }
    ],
    "allDeclaredConstructors": true,
    "allPublicConstructors": true,
    "allDeclaredMethods": true,
    "allPublicMethods": true,
    "allDeclaredFields": true,
    "allPublicFields": true,
    "allDeclaredClasses": true,
    "allPublicClasses": true
  },
  {
    "name": "[Ljava.nio.file.LinkOption;"
  },
  {
    "name": "[Ljava.nio.file.attribute.FileAttribute;"
  },
  {
    "name": "better.files.Disposable"
  },
  {
    "name": "better.files.Dispose$FlatMap"
  },
  {
    "name": "better.files.Dispose$FlatMap$Implicits"
  },
  {
    "name": "better.files.File$PathMatcherSyntax"
  },
  {
    "name": "better.files.Resource"
  },
  {
    "name": "better.files.ResourceScalaCompat"
  },
  {
    "name": "better.files.Scannable"
  },
  {
    "name": "better.files.Scanner$Read"
  },
  {
    "name": "better.files.Scanner$Read$Implicits"
  },
  {
    "name": "better.files.Scanner$Source"
  },
  {
    "name": "better.files.Scanner$Source$Implicits"
  },
  {
    "name": "better.files.StringSplitter"
  },
  {
    "name": "java.nio.file.DirectoryStream$Filter"
  },
  {
    "name": "java.nio.file.FileVisitor"
  },
  {
    "name": "java.nio.file.SimpleFileVisitor"
  },

  {
    "name": "com.mongodb.ContextProvider"
  },
  {
    "name": "com.mongodb.CreateIndexCommitQuorum"
  },
  {
    "name": "com.mongodb.DBObjectFactory"
  },
  {
    "name": "com.mongodb.ReadPreference"
  },
  {
    "name": "com.mongodb.RequestContext"
  },
  {
    "name": "com.mongodb.SubjectProvider"
  },
  {
    "name": "com.mongodb.WriteConcern",
    "allPublicFields": true
  },
  {
    "name": "com.mongodb.WriteConcernResult"
  },
  {
    "name": "com.mongodb.WriteError"
  },
  {
    "name": "com.mongodb.bulk.BulkWriteResult"
  },
  {
    "name": "com.mongodb.client.model.WindowOutputField"
  },
  {
    "name": "com.mongodb.client.model.WriteModel"
  },
  {
    "name": "com.mongodb.client.model.geojson.CoordinateReferenceSystem"
  },
  {
    "name": "com.mongodb.client.model.geojson.Geometry"
  },
  {
    "name": "com.mongodb.client.model.mql.BranchesTerminal"
  },
  {
    "name": "com.mongodb.client.model.mql.MqlValue"
  },
  {
    "name": "com.mongodb.client.model.search.CompoundSearchOperatorBase"
  },
  {
    "name": "com.mongodb.client.model.search.DateRangeSearchOperatorBase"
  },
  {
    "name": "com.mongodb.client.model.search.NumberRangeSearchOperatorBase"
  },
  {
    "name": "com.mongodb.client.result.DeleteResult"
  },
  {
    "name": "com.mongodb.client.result.InsertManyResult"
  },
  {
    "name": "com.mongodb.client.result.InsertOneResult"
  },
  {
    "name": "com.mongodb.client.result.UpdateResult"
  },
  {
    "name": "com.mongodb.connection.AsyncCompletionHandler"
  },
  {
    "name": "com.mongodb.connection.BufferProvider"
  },
  {
    "name": "com.mongodb.connection.StreamFactory"
  },
  {
    "name": "com.mongodb.connection.StreamFactoryFactory"
  },
  {
    "name": "com.mongodb.event.CommandEvent"
  },
  {
    "name": "com.mongodb.event.CommandListener"
  },
  {
    "name": "com.mongodb.internal.async.SingleResultCallback"
  },
  {
    "name": "com.mongodb.internal.async.function.AsyncCallbackRunnable"
  },
  {
    "name": "com.mongodb.internal.async.function.AsyncCallbackSupplier"
  },
  {
    "name": "com.mongodb.internal.async.function.LoopState$AttachmentKey"
  },
  {
    "name": "com.mongodb.internal.binding.ReferenceCounted"
  },
  {
    "name": "com.mongodb.internal.bulk.WriteRequest"
  },
  {
    "name": "com.mongodb.internal.client.model.ToMap"
  },
  {
    "name": "com.mongodb.internal.connection.AbstractByteBufBsonDocument$Finder"
  },
  {
    "name": "com.mongodb.internal.connection.Authenticator"
  },
  {
    "name": "com.mongodb.internal.connection.ClusterableServerFactory"
  },
  {
    "name": "com.mongodb.internal.connection.CommandEventSender"
  },
  {
    "name": "com.mongodb.internal.connection.CommandProtocol"
  },
  {
    "name": "com.mongodb.internal.connection.Compressor"
  },
  {
    "name": "com.mongodb.internal.connection.ConcurrentPool$ItemFactory"
  },
  {
    "name": "com.mongodb.internal.connection.ConnectionFactory"
  },
  {
    "name": "com.mongodb.internal.connection.ConnectionGenerationSupplier"
  },
  {
    "name": "com.mongodb.internal.connection.DnsSrvRecordInitializer"
  },
  {
    "name": "com.mongodb.internal.connection.DnsSrvRecordMonitor"
  },
  {
    "name": "com.mongodb.internal.connection.DnsSrvRecordMonitorFactory"
  },
  {
    "name": "com.mongodb.internal.connection.IndexMap"
  },
  {
    "name": "com.mongodb.internal.connection.InternalConnectionFactory"
  },
  {
    "name": "com.mongodb.internal.connection.InternalConnectionInitializer"
  },
  {
    "name": "com.mongodb.internal.connection.Pool"
  },
  {
    "name": "com.mongodb.internal.connection.ProtocolExecutor"
  },
  {
    "name": "com.mongodb.internal.connection.RequestMessage"
  },
  {
    "name": "com.mongodb.internal.connection.ScramShaAuthenticator$RandomStringGenerator"
  },
  {
    "name": "com.mongodb.internal.connection.SdamServerDescriptionManager"
  },
  {
    "name": "com.mongodb.internal.connection.Server"
  },
  {
    "name": "com.mongodb.internal.connection.ServerMonitor"
  },
  {
    "name": "com.mongodb.internal.connection.SpeculativeAuthenticator"
  },
  {
    "name": "com.mongodb.internal.connection.tlschannel.BufferAllocator"
  },
  {
    "name": "com.mongodb.internal.connection.tlschannel.ServerTlsChannel$SslContextStrategy"
  },
  {
    "name": "com.mongodb.internal.connection.tlschannel.TlsChannelBuilder"
  },
  {
    "name": "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannelGroup$Operation"
  },
  {
    "name": "com.mongodb.internal.connection.tlschannel.util.DirectBufferDeallocator$Deallocator"
  },
  {
    "name": "com.mongodb.internal.diagnostics.logging.Logger"
  },
  {
    "name": "com.mongodb.internal.dns.DnsResolver"
  },
  {
    "name": "com.mongodb.internal.inject.OptionalProvider"
  },
  {
    "name": "com.mongodb.internal.operation.AsyncReadOperation"
  },
  {
    "name": "com.mongodb.internal.operation.AsyncWriteOperation"
  },
  {
    "name": "com.mongodb.internal.operation.ReadOperation"
  },
  {
    "name": "com.mongodb.internal.operation.WriteOperation"
  },
  {
    "name": "com.mongodb.internal.session.SessionContext"
  },
  {
    "name": "com.mongodb.management.ConnectionPoolStatisticsMBean"
  },
  {
    "name": "com.mongodb.management.MBeanServer"
  },
  {
    "name": "com.mongodb.reactivestreams.client.MongoCollection"
  },
  {
    "name": "com.mongodb.reactivestreams.client.MongoDatabase"
  },
  {
    "name": "com.mongodb.reactivestreams.client.gridfs.GridFSBucket"
  },
  {
    "name": "com.mongodb.reactivestreams.client.internal.OperationExecutor"
  },
  {
    "name": "com.mongodb.selector.ServerSelector"
  },
  {
    "name": "com.mongodb.session.ServerSession"
  },
  {
    "name": "com.mongodb.spi.dns.DnsClient"
  },
  {
    "name": "akka.NotUsed"
  },
  {
    "name": "akka.actor.AbstractProps"
  },
  {
    "name": "akka.actor.Actor"
  },
  {
    "name": "akka.actor.ActorCell",
    "fields": [
      {
        "name": "akka$actor$dungeon$Children$$_childrenRefsDoNotCallMeDirectly"
      },
      {
        "name": "akka$actor$dungeon$Children$$_functionRefsDoNotCallMeDirectly"
      },
      {
        "name": "akka$actor$dungeon$Children$$_nextNameDoNotCallMeDirectly"
      },
      {
        "name": "akka$actor$dungeon$Dispatch$$_mailboxDoNotCallMeDirectly"
      }
    ]
  },
  {
    "name": "akka.actor.ActorLogging"
  },
  {
    "name": "akka.actor.ActorRefFactory"
  },
  {
    "name": "akka.actor.ActorRefProvider"
  },
  {
    "name": "akka.actor.ActorRefScope"
  },
  {
    "name": "akka.actor.Cancellable"
  },
  {
    "name": "akka.actor.Cell"
  },
  {
    "name": "akka.actor.ChildStats"
  },
  {
    "name": "akka.actor.ClassicActorContextProvider"
  },
  {
    "name": "akka.actor.ClassicActorSystemProvider"
  },
  {
    "name": "akka.actor.CoordinatedShutdown$PhaseDefinition"
  },
  {
    "name": "akka.actor.CoordinatedShutdown$Reason"
  },
  {
    "name": "akka.actor.CoordinatedShutdown$tasks$TaskDefinition$$anon$2$TaskState"
  },
  {
    "name": "akka.actor.DeadLetterSuppression"
  },
  {
    "name": "akka.actor.DefaultSupervisorStrategy",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "akka.actor.DynamicAccess"
  },
  {
    "name": "akka.actor.Extension"
  },
  {
    "name": "akka.actor.ExtensionId"
  },
  {
    "name": "akka.actor.ExtensionIdProvider"
  },
  {
    "name": "akka.actor.FSM$Reason"
  },
  {
    "name": "akka.actor.FSM$TimerMode"
  },
  {
    "name": "akka.actor.IndirectActorProducer"
  },
  {
    "name": "akka.actor.JVMShutdownHooks"
  },
  {
    "name": "akka.actor.LightArrayRevolverScheduler",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "com.typesafe.config.Config",
          "akka.event.LoggingAdapter",
          "java.util.concurrent.ThreadFactory"
        ]
      }
    ]
  },
  {
    "name": "akka.actor.LightArrayRevolverScheduler$TaskHolder",
    "fields": [
      {
        "name": "task"
      }
    ]
  },
  {
    "name": "akka.actor.LocalActorRefProvider",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "java.lang.String",
          "akka.actor.ActorSystem$Settings",
          "akka.event.EventStream",
          "akka.actor.DynamicAccess"
        ]
      }
    ]
  },
  {
    "name": "akka.actor.LocalActorRefProvider$Guardian",
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "akka.actor.SupervisorStrategy"
        ]
      }
    ]
  },
  {
    "name": "akka.actor.LocalActorRefProvider$SystemGuardian",
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "akka.actor.SupervisorStrategy",
          "akka.actor.ActorRef"
        ]
      }
    ]
  },
  {
    "name": "akka.actor.NoSerializationVerificationNeeded"
  },
  {
    "name": "akka.actor.NotInfluenceReceiveTimeout"
  },
  {
    "name": "akka.actor.PathUtils"
  },
  {
    "name": "akka.actor.PossiblyHarmful"
  },
  {
    "name": "akka.actor.Props$EmptyActor",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "akka.actor.ProviderSelection"
  },
  {
    "name": "akka.actor.RepointableActorRef",
    "fields": [
      {
        "name": "_cellDoNotCallMeDirectly"
      },
      {
        "name": "_lookupDoNotCallMeDirectly"
      }
    ]
  },
  {
    "name": "akka.actor.ScalaActorRef"
  },
  {
    "name": "akka.actor.ScalaActorSelection"
  },
  {
    "name": "akka.actor.Scheduler"
  },
  {
    "name": "akka.actor.Scope"
  },
  {
    "name": "akka.actor.SelectionPathElement"
  },
  {
    "name": "akka.actor.StashSupport"
  },
  {
    "name": "akka.actor.SupervisorStrategy"
  },
  {
    "name": "akka.actor.SupervisorStrategy$Directive"
  },
  {
    "name": "akka.actor.SupervisorStrategyConfigurator"
  },
  {
    "name": "akka.actor.SupervisorStrategyLowPriorityImplicits"
  },
  {
    "name": "akka.actor.TimerScheduler"
  },
  {
    "name": "akka.actor.TimerSchedulerImpl$TimerMode"
  },
  {
    "name": "akka.actor.TimerSchedulerImpl$TimerMsg"
  },
  {
    "name": "akka.actor.TypedActorFactory"
  },
  {
    "name": "akka.actor.WrappedMessage"
  },
  {
    "name": "akka.actor.dungeon.Children"
  },
  {
    "name": "akka.actor.dungeon.ChildrenContainer"
  },
  {
    "name": "akka.actor.dungeon.ChildrenContainer$SuspendReason"
  },
  {
    "name": "akka.actor.dungeon.ChildrenContainer$WaitingForChildren"
  },
  {
    "name": "akka.actor.dungeon.DeathWatch"
  },
  {
    "name": "akka.actor.dungeon.Dispatch"
  },
  {
    "name": "akka.actor.dungeon.FaultHandling"
  },
  {
    "name": "akka.actor.dungeon.FaultHandling$FailedInfo"
  },
  {
    "name": "akka.actor.dungeon.ReceiveTimeout"
  },
  {
    "name": "akka.actor.setup.Setup"
  },
  {
    "name": "akka.dispatch.AbstractBoundedNodeQueue"
  },
  {
    "name": "akka.dispatch.AbstractMessageDispatcher"
  },
  {
    "name": "akka.dispatch.AbstractNodeQueue",
    "fields": [
      {
        "name": "_tailDoNotCallMeDirectly"
      }
    ]
  },
  {
    "name": "akka.dispatch.AbstractNodeQueue$Node",
    "fields": [
      {
        "name": "_nextDoNotCallMeDirectly"
      }
    ]
  },
  {
    "name": "akka.dispatch.BoundedControlAwareMessageQueueSemantics"
  },
  {
    "name": "akka.dispatch.BoundedDequeBasedMessageQueueSemantics"
  },
  {
    "name": "akka.dispatch.BoundedMessageQueueSemantics"
  },
  {
    "name": "akka.dispatch.CachingConfig$PathEntry"
  },
  {
    "name": "akka.dispatch.ControlAwareMessageQueueSemantics"
  },
  {
    "name": "akka.dispatch.DefaultSystemMessageQueue"
  },
  {
    "name": "akka.dispatch.DequeBasedMessageQueueSemantics"
  },
  {
    "name": "akka.dispatch.DispatcherPrerequisites"
  },
  {
    "name": "akka.dispatch.ExecutorServiceFactory"
  },
  {
    "name": "akka.dispatch.ExecutorServiceFactoryProvider"
  },
  {
    "name": "akka.dispatch.LoadMetrics"
  },
  {
    "name": "akka.dispatch.Mailbox",
    "fields": [
      {
        "name": "_statusDoNotCallMeDirectly"
      },
      {
        "name": "_systemQueueDoNotCallMeDirectly"
      }
    ]
  },
  {
    "name": "akka.dispatch.MailboxType"
  },
  {
    "name": "akka.dispatch.MessageDispatcher",
    "fields": [
      {
        "name": "_inhabitantsDoNotCallMeDirectly"
      },
      {
        "name": "_shutdownScheduleDoNotCallMeDirectly"
      }
    ]
  },
  {
    "name": "akka.dispatch.MessageDispatcherConfigurator"
  },
  {
    "name": "akka.dispatch.MessageQueue"
  },
  {
    "name": "akka.dispatch.MultipleConsumerSemantics"
  },
  {
    "name": "akka.dispatch.ProducesMessageQueue"
  },
  {
    "name": "akka.dispatch.ProducesPushTimeoutSemanticsMailbox"
  },
  {
    "name": "akka.dispatch.RequiresMessageQueue"
  },
  {
    "name": "akka.dispatch.SystemMessageQueue"
  },
  {
    "name": "akka.dispatch.UnboundedControlAwareMessageQueueSemantics"
  },
  {
    "name": "akka.dispatch.UnboundedDequeBasedMessageQueueSemantics"
  },
  {
    "name": "akka.dispatch.UnboundedMailbox",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "akka.actor.ActorSystem$Settings",
          "com.typesafe.config.Config"
        ]
      }
    ]
  },
  {
    "name": "akka.dispatch.UnboundedMessageQueueSemantics"
  },
  {
    "name": "akka.dispatch.affinity.QueueSelector"
  },
  {
    "name": "akka.dispatch.affinity.QueueSelectorFactory"
  },
  {
    "name": "akka.dispatch.affinity.RejectionHandler"
  },
  {
    "name": "akka.dispatch.affinity.RejectionHandlerFactory"
  },
  {
    "name": "akka.dispatch.sysmsg.StashWhenFailed"
  },
  {
    "name": "akka.dispatch.sysmsg.StashWhenWaitingForChildren"
  },
  {
    "name": "akka.event.ActorClassifier"
  },
  {
    "name": "akka.event.DeadLetterListener",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "akka.event.DefaultLoggingFilter",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "akka.actor.ActorSystem$Settings",
          "akka.event.EventStream"
        ]
      }
    ]
  },
  {
    "name": "akka.event.EventBus"
  },
  {
    "name": "akka.event.EventStreamUnsubscriber",
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "akka.event.EventStream",
          "boolean"
        ]
      }
    ]
  },
  {
    "name": "akka.event.LogMarker"
  },
  {
    "name": "akka.event.LogSource"
  },
  {
    "name": "akka.event.LoggerMailboxType",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "akka.actor.ActorSystem$Settings",
          "com.typesafe.config.Config"
        ]
      }
    ]
  },
  {
    "name": "akka.event.LoggerMessageQueueSemantics"
  },
  {
    "name": "akka.event.Logging$DefaultLogger",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "akka.event.Logging$LogEventWithCause"
  },
  {
    "name": "akka.event.Logging$LoggerInitialized"
  },
  {
    "name": "akka.event.Logging$StdOutLogger"
  },
  {
    "name": "akka.event.LoggingAdapter"
  },
  {
    "name": "akka.event.LoggingFilter"
  },
  {
    "name": "akka.event.LookupClassification"
  },
  {
    "name": "akka.event.ManagedActorClassification"
  },
  {
    "name": "akka.event.ScanningClassification"
  },
  {
    "name": "akka.event.SubchannelClassification"
  },
  {
    "name": "akka.event.japi.EventBus"
  },
  {
    "name": "akka.event.slf4j.SLF4JLogging"
  },
  {
    "name": "akka.http.DefaultParsingErrorHandler$",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "akka.http.ParsingErrorHandler"
  },
  {
    "name": "akka.http.impl.engine.client.HttpsProxyGraphStage$State"
  },
  {
    "name": "akka.http.impl.engine.client.PoolId$PoolUsage"
  },
  {
    "name": "akka.http.impl.engine.client.PoolInterface"
  },
  {
    "name": "akka.http.impl.engine.client.PoolInterface$ShutdownReason"
  },
  {
    "name": "akka.http.impl.engine.client.PoolMasterActor",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": []
      }
    ]
  },
  {
    "name": "akka.http.impl.engine.client.PoolMasterActor$PoolInterfaceStatus"
  },
  {
    "name": "akka.http.impl.engine.client.pool.NewHostConnectionPool$HostConnectionPoolStage$$anon$1$StateHandling"
  },
  {
    "name": "akka.http.impl.engine.client.pool.SlotState$BusyState"
  },
  {
    "name": "akka.http.impl.engine.client.pool.SlotState$IdleState"
  },
  {
    "name": "akka.http.impl.engine.http2.ConfigurablePing$PingState"
  },
  {
    "name": "akka.http.impl.engine.http2.FrameEvent"
  },
  {
    "name": "akka.http.impl.engine.http2.GenericOutlet"
  },
  {
    "name": "akka.http.impl.engine.http2.GenericOutletSupport"
  },
  {
    "name": "akka.http.impl.engine.http2.Http2Multiplexer"
  },
  {
    "name": "akka.http.impl.engine.http2.Http2MultiplexerSupport"
  },
  {
    "name": "akka.http.impl.engine.http2.Http2MultiplexerSupport$StateTimingSupport"
  },
  {
    "name": "akka.http.impl.engine.http2.Http2StreamHandling"
  },
  {
    "name": "akka.http.impl.engine.http2.Http2StreamHandling$OutStream"
  },
  {
    "name": "akka.http.impl.engine.http2.Http2StreamHandling$Sending"
  },
  {
    "name": "akka.http.impl.engine.http2.Http2StreamHandling$StreamState"
  },
  {
    "name": "akka.http.impl.engine.http2.IncomingFlowController"
  },
  {
    "name": "akka.http.impl.engine.http2.PriorityNode"
  },
  {
    "name": "akka.http.impl.engine.http2.PriorityTree"
  },
  {
    "name": "akka.http.impl.engine.http2.PullFrameResult"
  },
  {
    "name": "akka.http.impl.engine.http2.StreamPrioritizer"
  },
  {
    "name": "akka.http.impl.engine.http2.TelemetrySpi"
  },
  {
    "name": "akka.http.impl.engine.http2.hpack.Http2HeaderParsing$HeaderParser"
  },
  {
    "name": "akka.http.impl.engine.parsing.BodyPartParser$EndOfLineConfiguration"
  },
  {
    "name": "akka.http.impl.engine.parsing.BodyPartParser$Output"
  },
  {
    "name": "akka.http.impl.engine.parsing.HttpHeaderParser$HeaderValueParser"
  },
  {
    "name": "akka.http.impl.engine.parsing.HttpMessageParser"
  },
  {
    "name": "akka.http.impl.engine.parsing.HttpMessageParser$StateResult"
  },
  {
    "name": "akka.http.impl.engine.parsing.ParserOutput"
  },
  {
    "name": "akka.http.impl.engine.rendering.DateHeaderRendering"
  },
  {
    "name": "akka.http.impl.engine.rendering.DateHeaderRendering$DateState$1"
  },
  {
    "name": "akka.http.impl.engine.rendering.HttpRequestRendererFactory$RequestRenderingOutput"
  },
  {
    "name": "akka.http.impl.engine.rendering.HttpResponseRendererFactory$CloseMode"
  },
  {
    "name": "akka.http.impl.engine.rendering.HttpResponseRendererFactory$HttpResponseRenderer$StrictOrStreamed"
  },
  {
    "name": "akka.http.impl.engine.rendering.ResponseRenderingContext$CloseRequested"
  },
  {
    "name": "akka.http.impl.engine.rendering.ResponseRenderingOutput"
  },
  {
    "name": "akka.http.impl.engine.server.MasterServerTerminator$State"
  },
  {
    "name": "akka.http.impl.engine.server.ServerTerminator"
  },
  {
    "name": "akka.http.impl.engine.ws.FrameEventOrError"
  },
  {
    "name": "akka.http.impl.engine.ws.FrameHandler$Output"
  },
  {
    "name": "akka.http.impl.engine.ws.Protocol$Opcode"
  },
  {
    "name": "akka.http.impl.engine.ws.StreamingCharsetDecoder"
  },
  {
    "name": "akka.http.impl.engine.ws.StreamingCharsetDecoderInstance"
  },
  {
    "name": "akka.http.impl.model.parser.AcceptCharsetHeader"
  },
  {
    "name": "akka.http.impl.model.parser.AcceptEncodingHeader"
  },
  {
    "name": "akka.http.impl.model.parser.AcceptHeader"
  },
  {
    "name": "akka.http.impl.model.parser.AcceptLanguageHeader"
  },
  {
    "name": "akka.http.impl.model.parser.CacheControlHeader"
  },
  {
    "name": "akka.http.impl.model.parser.CommonActions"
  },
  {
    "name": "akka.http.impl.model.parser.CommonRules"
  },
  {
    "name": "akka.http.impl.model.parser.ContentDispositionHeader"
  },
  {
    "name": "akka.http.impl.model.parser.ContentTypeHeader"
  },
  {
    "name": "akka.http.impl.model.parser.HeaderParser$Result"
  },
  {
    "name": "akka.http.impl.model.parser.HeaderParser$Settings"
  },
  {
    "name": "akka.http.impl.model.parser.IpAddressParsing"
  },
  {
    "name": "akka.http.impl.model.parser.LinkHeader"
  },
  {
    "name": "akka.http.impl.model.parser.SimpleHeaders"
  },
  {
    "name": "akka.http.impl.model.parser.StringBuilding"
  },
  {
    "name": "akka.http.impl.model.parser.WebSocketHeaders"
  },
  {
    "name": "akka.http.impl.util.J2SMapping"
  },
  {
    "name": "akka.http.impl.util.JavaMapping$AsJava"
  },
  {
    "name": "akka.http.impl.util.JavaMapping$AsScala"
  },
  {
    "name": "akka.http.impl.util.ObjectRegistry"
  },
  {
    "name": "akka.http.impl.util.Renderable"
  },
  {
    "name": "akka.http.impl.util.Renderer"
  },
  {
    "name": "akka.http.impl.util.Rendering"
  },
  {
    "name": "akka.http.impl.util.S2JMapping"
  },
  {
    "name": "akka.http.impl.util.SettingsCompanionImpl"
  },
  {
    "name": "akka.http.impl.util.StageLoggingWithOverride"
  },
  {
    "name": "akka.http.impl.util.StreamUtils$EntityStreamOp"
  },
  {
    "name": "akka.http.impl.util.StreamUtils$OneTimeValve"
  },
  {
    "name": "akka.http.impl.util.StreamUtils$ScheduleSupport"
  },
  {
    "name": "akka.http.javadsl.ClientTransport"
  },
  {
    "name": "akka.http.javadsl.ConnectHttp"
  },
  {
    "name": "akka.http.javadsl.ConnectionContext"
  },
  {
    "name": "akka.http.javadsl.HandlerProvider"
  },
  {
    "name": "akka.http.javadsl.HostConnectionPool"
  },
  {
    "name": "akka.http.javadsl.HttpTerminated"
  },
  {
    "name": "akka.http.javadsl.OutgoingConnectionBuilder"
  },
  {
    "name": "akka.http.javadsl.ServerBuilder"
  },
  {
    "name": "akka.http.javadsl.TimeoutAccess"
  },
  {
    "name": "akka.http.javadsl.common.EntityStreamingSupport"
  },
  {
    "name": "akka.http.javadsl.model.AttributeKey"
  },
  {
    "name": "akka.http.javadsl.model.Authority"
  },
  {
    "name": "akka.http.javadsl.model.ContentRange"
  },
  {
    "name": "akka.http.javadsl.model.ContentType"
  },
  {
    "name": "akka.http.javadsl.model.ContentTypeRange"
  },
  {
    "name": "akka.http.javadsl.model.DateTime"
  },
  {
    "name": "akka.http.javadsl.model.Host"
  },
  {
    "name": "akka.http.javadsl.model.HttpCharset"
  },
  {
    "name": "akka.http.javadsl.model.HttpCharsetRange"
  },
  {
    "name": "akka.http.javadsl.model.HttpEntity"
  },
  {
    "name": "akka.http.javadsl.model.HttpEntity$ChunkStreamPart"
  },
  {
    "name": "akka.http.javadsl.model.HttpEntity$DiscardedEntity"
  },
  {
    "name": "akka.http.javadsl.model.HttpHeader"
  },
  {
    "name": "akka.http.javadsl.model.HttpMessage"
  },
  {
    "name": "akka.http.javadsl.model.HttpMessage$MessageTransformations"
  },
  {
    "name": "akka.http.javadsl.model.HttpMethod"
  },
  {
    "name": "akka.http.javadsl.model.HttpProtocol"
  },
  {
    "name": "akka.http.javadsl.model.MediaRange"
  },
  {
    "name": "akka.http.javadsl.model.MediaType"
  },
  {
    "name": "akka.http.javadsl.model.MediaType$Compressibility"
  },
  {
    "name": "akka.http.javadsl.model.Multipart"
  },
  {
    "name": "akka.http.javadsl.model.Multipart$BodyPart"
  },
  {
    "name": "akka.http.javadsl.model.Query"
  },
  {
    "name": "akka.http.javadsl.model.RemoteAddress"
  },
  {
    "name": "akka.http.javadsl.model.RequestEntityAcceptance"
  },
  {
    "name": "akka.http.javadsl.model.RequestResponseAssociation"
  },
  {
    "name": "akka.http.javadsl.model.SslSessionInfo"
  },
  {
    "name": "akka.http.javadsl.model.StatusCode"
  },
  {
    "name": "akka.http.javadsl.model.Trailer"
  },
  {
    "name": "akka.http.javadsl.model.TransferEncoding"
  },
  {
    "name": "akka.http.javadsl.model.Uri"
  },
  {
    "name": "akka.http.javadsl.model.Uri$ParsingMode"
  },
  {
    "name": "akka.http.javadsl.model.headers.ByteRange"
  },
  {
    "name": "akka.http.javadsl.model.headers.CacheDirective"
  },
  {
    "name": "akka.http.javadsl.model.headers.ContentDispositionType"
  },
  {
    "name": "akka.http.javadsl.model.headers.EntityTag"
  },
  {
    "name": "akka.http.javadsl.model.headers.EntityTagRange"
  },
  {
    "name": "akka.http.javadsl.model.headers.HttpChallenge"
  },
  {
    "name": "akka.http.javadsl.model.headers.HttpCookie"
  },
  {
    "name": "akka.http.javadsl.model.headers.HttpCookiePair"
  },
  {
    "name": "akka.http.javadsl.model.headers.HttpCredentials"
  },
  {
    "name": "akka.http.javadsl.model.headers.HttpEncoding"
  },
  {
    "name": "akka.http.javadsl.model.headers.HttpEncodingRange"
  },
  {
    "name": "akka.http.javadsl.model.headers.HttpOrigin"
  },
  {
    "name": "akka.http.javadsl.model.headers.HttpOriginRange"
  },
  {
    "name": "akka.http.javadsl.model.headers.Language"
  },
  {
    "name": "akka.http.javadsl.model.headers.LanguageRange"
  },
  {
    "name": "akka.http.javadsl.model.headers.LinkParam"
  },
  {
    "name": "akka.http.javadsl.model.headers.LinkValue"
  },
  {
    "name": "akka.http.javadsl.model.headers.ProductVersion"
  },
  {
    "name": "akka.http.javadsl.model.headers.RangeUnit"
  },
  {
    "name": "akka.http.javadsl.model.sse.ServerSentEvent"
  },
  {
    "name": "akka.http.javadsl.model.ws.Message"
  },
  {
    "name": "akka.http.javadsl.model.ws.PeerClosedConnectionException"
  },
  {
    "name": "akka.http.javadsl.model.ws.WebSocketRequest"
  },
  {
    "name": "akka.http.javadsl.model.ws.WebSocketUpgrade"
  },
  {
    "name": "akka.http.javadsl.model.ws.WebSocketUpgradeResponse"
  },
  {
    "name": "akka.http.javadsl.server.AuthenticationFailedRejection$Cause"
  },
  {
    "name": "akka.http.javadsl.server.Rejection"
  },
  {
    "name": "akka.http.javadsl.server.RouteResult"
  },
  {
    "name": "akka.http.javadsl.server.directives.BasicDirectives"
  },
  {
    "name": "akka.http.javadsl.server.directives.ContentTypeResolver"
  },
  {
    "name": "akka.http.javadsl.server.directives.DirectoryListing"
  },
  {
    "name": "akka.http.javadsl.server.directives.DirectoryRenderer"
  },
  {
    "name": "akka.http.javadsl.server.directives.FileInfo"
  },
  {
    "name": "akka.http.javadsl.server.directives.LogEntry"
  },
  {
    "name": "akka.http.javadsl.settings.ClientConnectionSettings"
  },
  {
    "name": "akka.http.javadsl.settings.ConnectionPoolSettings"
  },
  {
    "name": "akka.http.javadsl.settings.Http2ClientSettings"
  },
  {
    "name": "akka.http.javadsl.settings.Http2ServerSettings"
  },
  {
    "name": "akka.http.javadsl.settings.HttpsProxySettings"
  },
  {
    "name": "akka.http.javadsl.settings.ParserSettings$ConflictingContentTypeHeaderProcessingMode"
  },
  {
    "name": "akka.http.javadsl.settings.ParserSettings$CookieParsingMode"
  },
  {
    "name": "akka.http.javadsl.settings.ParserSettings$ErrorLoggingVerbosity"
  },
  {
    "name": "akka.http.javadsl.settings.ParserSettings$IllegalResponseHeaderNameProcessingMode"
  },
  {
    "name": "akka.http.javadsl.settings.ParserSettings$IllegalResponseHeaderValueProcessingMode"
  },
  {
    "name": "akka.http.javadsl.settings.PreviewServerSettings"
  },
  {
    "name": "akka.http.javadsl.settings.RoutingSettings"
  },
  {
    "name": "akka.http.javadsl.settings.ServerSentEventSettings"
  },
  {
    "name": "akka.http.javadsl.settings.ServerSettings"
  },
  {
    "name": "akka.http.javadsl.settings.ServerSettings$Timeouts"
  },
  {
    "name": "akka.http.javadsl.settings.SettingsCompanion"
  },
  {
    "name": "akka.http.javadsl.settings.WebSocketSettings"
  },
  {
    "name": "akka.http.javadsl.unmarshalling.UnmarshallerBase"
  },
  {
    "name": "akka.http.javadsl.unmarshalling.Unmarshallers"
  },
  {
    "name": "akka.http.scaladsl.ClientTransport"
  },
  {
    "name": "akka.http.scaladsl.ConnectionContext"
  },
  {
    "name": "akka.http.scaladsl.DefaultSSLContextCreation"
  },
  {
    "name": "akka.http.scaladsl.OutgoingConnectionBuilder"
  },
  {
    "name": "akka.http.scaladsl.ServerBuilder"
  },
  {
    "name": "akka.http.scaladsl.client.TransformerAux"
  },
  {
    "name": "akka.http.scaladsl.client.TransformerPipelineSupport"
  },
  {
    "name": "akka.http.scaladsl.coding.Compressor"
  },
  {
    "name": "akka.http.scaladsl.coding.DataMapper"
  },
  {
    "name": "akka.http.scaladsl.coding.Decoder"
  },
  {
    "name": "akka.http.scaladsl.coding.Encoder"
  },
  {
    "name": "akka.http.scaladsl.common.StrictForm"
  },
  {
    "name": "akka.http.scaladsl.common.StrictForm$Field"
  },
  {
    "name": "akka.http.scaladsl.common.StrictForm$Field$FieldUnmarshaller"
  },
  {
    "name": "akka.http.scaladsl.common.StrictForm$Field$LowPrioImplicits"
  },
  {
    "name": "akka.http.scaladsl.common.ToNameReceptacleEnhancements"
  },
  {
    "name": "akka.http.scaladsl.marshalling.ContentTypeOverrider"
  },
  {
    "name": "akka.http.scaladsl.marshalling.LowPriorityToResponseMarshallerImplicits"
  },
  {
    "name": "akka.http.scaladsl.marshalling.Marshaller"
  },
  {
    "name": "akka.http.scaladsl.marshalling.Marshalling"
  },
  {
    "name": "akka.http.scaladsl.marshalling.MultipartMarshallers"
  },
  {
    "name": "akka.http.scaladsl.marshalling.PredefinedToRequestMarshallers"
  },
  {
    "name": "akka.http.scaladsl.marshalling.ToResponseMarshallable"
  },
  {
    "name": "akka.http.scaladsl.marshalling.sse.EventStreamMarshalling"
  },
  {
    "name": "akka.http.scaladsl.model.HttpHeader$ParsingResult"
  },
  {
    "name": "akka.http.scaladsl.model.RequestEntityAcceptance"
  },
  {
    "name": "akka.http.scaladsl.model.SensitiveHttpHeader"
  },
  {
    "name": "akka.http.scaladsl.model.Uri$Path"
  },
  {
    "name": "akka.http.scaladsl.model.WithQValue"
  },
  {
    "name": "akka.http.scaladsl.model.headers.RetryAfterParameter"
  },
  {
    "name": "akka.http.scaladsl.model.headers.StrictTransportSecurityDirective"
  },
  {
    "name": "akka.http.scaladsl.model.ws.Message"
  },
  {
    "name": "akka.http.scaladsl.model.ws.WebSocketUpgradeResponse"
  },
  {
    "name": "akka.http.scaladsl.server.ConjunctionMagnet"
  },
  {
    "name": "akka.http.scaladsl.server.ContentNegotiator$Alternative"
  },
  {
    "name": "akka.http.scaladsl.server.Directive"
  },
  {
    "name": "akka.http.scaladsl.server.ImplicitPathMatcherConstruction"
  },
  {
    "name": "akka.http.scaladsl.server.LowerPriorityRouteResultImplicits"
  },
  {
    "name": "akka.http.scaladsl.server.LowerPriorityRoutingLogImplicits"
  },
  {
    "name": "akka.http.scaladsl.server.PathMatcher$Lift"
  },
  {
    "name": "akka.http.scaladsl.server.PathMatcher$Lift$MOps"
  },
  {
    "name": "akka.http.scaladsl.server.PathMatcher$LowLevelLiftImplicits"
  },
  {
    "name": "akka.http.scaladsl.server.PathMatcher$Matching"
  },
  {
    "name": "akka.http.scaladsl.server.PathMatchers"
  },
  {
    "name": "akka.http.scaladsl.server.RejectionHandler$Handler"
  },
  {
    "name": "akka.http.scaladsl.server.RequestContext"
  },
  {
    "name": "akka.http.scaladsl.server.RouteConcatenation"
  },
  {
    "name": "akka.http.scaladsl.server.RoutingLog"
  },
  {
    "name": "akka.http.scaladsl.server.directives.AttributeDirectives"
  },
  {
    "name": "akka.http.scaladsl.server.directives.AuthenticationDirective"
  },
  {
    "name": "akka.http.scaladsl.server.directives.BasicDirectives"
  },
  {
    "name": "akka.http.scaladsl.server.directives.CacheConditionDirectives"
  },
  {
    "name": "akka.http.scaladsl.server.directives.CodingDirectives"
  },
  {
    "name": "akka.http.scaladsl.server.directives.CompleteOrRecoverWithMagnet"
  },
  {
    "name": "akka.http.scaladsl.server.directives.CookieDirectives"
  },
  {
    "name": "akka.http.scaladsl.server.directives.Credentials"
  },
  {
    "name": "akka.http.scaladsl.server.directives.DebuggingDirectives"
  },
  {
    "name": "akka.http.scaladsl.server.directives.ExecutionDirectives"
  },
  {
    "name": "akka.http.scaladsl.server.directives.FileAndResourceDirectives"
  },
  {
    "name": "akka.http.scaladsl.server.directives.FileAndResourceDirectives$LowLevelDirectoryRenderer"
  },
  {
    "name": "akka.http.scaladsl.server.directives.FileUploadDirectives"
  },
  {
    "name": "akka.http.scaladsl.server.directives.FormFieldDirectives$FieldDef"
  },
  {
    "name": "akka.http.scaladsl.server.directives.FormFieldDirectives$FieldMagnet"
  },
  {
    "name": "akka.http.scaladsl.server.directives.FormFieldDirectives$FieldSpec"
  },
  {
    "name": "akka.http.scaladsl.server.directives.FormFieldDirectivesInstances"
  },
  {
    "name": "akka.http.scaladsl.server.directives.FutureDirectives"
  },
  {
    "name": "akka.http.scaladsl.server.directives.HeaderDirectives"
  },
  {
    "name": "akka.http.scaladsl.server.directives.HeaderMagnet"
  },
  {
    "name": "akka.http.scaladsl.server.directives.HostDirectives"
  },
  {
    "name": "akka.http.scaladsl.server.directives.LowPriorityHeaderMagnetImplicits"
  },
  {
    "name": "akka.http.scaladsl.server.directives.MarshallingDirectives"
  },
  {
    "name": "akka.http.scaladsl.server.directives.MethodDirectives"
  },
  {
    "name": "akka.http.scaladsl.server.directives.MiscDirectives"
  },
  {
    "name": "akka.http.scaladsl.server.directives.OnSuccessMagnet"
  },
  {
    "name": "akka.http.scaladsl.server.directives.ParameterDirectives$ParamDef"
  },
  {
    "name": "akka.http.scaladsl.server.directives.ParameterDirectives$ParamMagnet"
  },
  {
    "name": "akka.http.scaladsl.server.directives.ParameterDirectives$ParamSpec"
  },
  {
    "name": "akka.http.scaladsl.server.directives.ParameterDirectivesInstances"
  },
  {
    "name": "akka.http.scaladsl.server.directives.RangeDirectives"
  },
  {
    "name": "akka.http.scaladsl.server.directives.RespondWithDirectives"
  },
  {
    "name": "akka.http.scaladsl.server.directives.RouteDirectives"
  },
  {
    "name": "akka.http.scaladsl.server.directives.SchemeDirectives"
  },
  {
    "name": "akka.http.scaladsl.server.directives.SecurityDirectives"
  },
  {
    "name": "akka.http.scaladsl.server.directives.TimeoutDirectives"
  },
  {
    "name": "akka.http.scaladsl.server.directives.WebSocketDirectives"
  },
  {
    "name": "akka.http.scaladsl.server.util.ApplyConverter"
  },
  {
    "name": "akka.http.scaladsl.server.util.ApplyConverterInstances"
  },
  {
    "name": "akka.http.scaladsl.server.util.BinaryPolyFunc"
  },
  {
    "name": "akka.http.scaladsl.server.util.BinaryPolyFunc$Case"
  },
  {
    "name": "akka.http.scaladsl.server.util.ClassMagnet"
  },
  {
    "name": "akka.http.scaladsl.server.util.ConstructFromTupleInstances"
  },
  {
    "name": "akka.http.scaladsl.server.util.LowerPriorityTupler"
  },
  {
    "name": "akka.http.scaladsl.server.util.TupleAppendOneInstances"
  },
  {
    "name": "akka.http.scaladsl.server.util.TupleFoldInstances"
  },
  {
    "name": "akka.http.scaladsl.server.util.TupleOps$AppendOne"
  },
  {
    "name": "akka.http.scaladsl.server.util.TupleOps$FoldLeft"
  },
  {
    "name": "akka.http.scaladsl.server.util.TupleOps$Join"
  },
  {
    "name": "akka.http.scaladsl.server.util.TupleOps$LowLevelJoinImplicits"
  },
  {
    "name": "akka.http.scaladsl.server.util.Tupler"
  },
  {
    "name": "akka.http.scaladsl.settings.Http2CommonSettings"
  },
  {
    "name": "akka.http.scaladsl.settings.SettingsCompanion"
  },
  {
    "name": "akka.http.scaladsl.unmarshalling.LowerPriorityGenericUnmarshallers"
  },
  {
    "name": "akka.http.scaladsl.unmarshalling.MultipartUnmarshallers"
  },
  {
    "name": "akka.http.scaladsl.unmarshalling.PredefinedFromStringUnmarshallers"
  },
  {
    "name": "akka.http.scaladsl.unmarshalling.Unmarshaller"
  },
  {
    "name": "akka.http.scaladsl.unmarshalling.sse.EventStreamUnmarshalling"
  },
  {
    "name": "akka.http.shaded.com.twitter.hpack.HeaderListener"
  },
  {
    "name": "akka.io.BufferPool"
  },
  {
    "name": "akka.io.ChannelRegistry"
  },
  {
    "name": "akka.io.Dns"
  },
  {
    "name": "akka.io.Dns$Command"
  },
  {
    "name": "akka.io.DnsProvider"
  },
  {
    "name": "akka.io.Inet$SoForwarders"
  },
  {
    "name": "akka.io.Inet$SoJavaFactories"
  },
  {
    "name": "akka.io.Inet$SocketOption"
  },
  {
    "name": "akka.io.PeriodicCacheCleanup"
  },
  {
    "name": "akka.io.SelectionHandler",
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "akka.io.SelectionHandlerSettings"
        ]
      }
    ]
  },
  {
    "name": "akka.io.SelectionHandler$HasFailureMessage"
  },
  {
    "name": "akka.io.SelectionHandlerSettings"
  },
  {
    "name": "akka.io.TcpConnection$PendingWrite"
  },
  {
    "name": "akka.io.TcpConnection$ReadResult"
  },
  {
    "name": "akka.io.TcpIncomingConnection",
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "akka.io.TcpExt",
          "java.nio.channels.SocketChannel",
          "akka.io.ChannelRegistry",
          "akka.actor.ActorRef",
          "scala.collection.immutable.Iterable",
          "boolean"
        ]
      }
    ]
  },
  {
    "name": "akka.io.TcpListener",
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "akka.actor.ActorRef",
          "akka.io.TcpExt",
          "akka.io.ChannelRegistry",
          "akka.actor.ActorRef",
          "akka.io.Tcp$Bind"
        ]
      }
    ]
  },
  {
    "name": "akka.io.TcpManager",
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "akka.io.TcpExt"
        ]
      }
    ]
  },
  {
    "name": "akka.io.Udp$Message"
  },
  {
    "name": "akka.io.Udp$Unbound"
  },
  {
    "name": "akka.io.UdpConnected$Message"
  },
  {
    "name": "akka.io.WithUdpSend"
  },
  {
    "name": "akka.io.dns.CachePolicy$CachePolicy"
  },
  {
    "name": "akka.io.dns.DnsProtocol$RequestType"
  },
  {
    "name": "akka.io.dns.internal.DnsClient$DnsQuestion"
  },
  {
    "name": "akka.japi.pf.AbstractMatch"
  },
  {
    "name": "akka.japi.pf.AbstractPFBuilder"
  },
  {
    "name": "akka.japi.pf.FI$Apply"
  },
  {
    "name": "akka.japi.pf.FI$Predicate"
  },
  {
    "name": "akka.japi.pf.FI$TypedPredicate"
  },
  {
    "name": "akka.japi.pf.FI$UnitApply"
  },
  {
    "name": "akka.macros.LogHelper"
  },
  {
    "name": "akka.parboiled2.CharPredicate"
  },
  {
    "name": "akka.parboiled2.DynamicRuleDispatch"
  },
  {
    "name": "akka.parboiled2.Parser$AlternativeDeliverySchemes"
  },
  {
    "name": "akka.parboiled2.Parser$DeliveryScheme"
  },
  {
    "name": "akka.parboiled2.Parser$ErrorAnalysisPhase"
  },
  {
    "name": "akka.parboiled2.ParserInput"
  },
  {
    "name": "akka.parboiled2.RuleDSLActions"
  },
  {
    "name": "akka.parboiled2.RuleDSLBasics"
  },
  {
    "name": "akka.parboiled2.RuleDSLCombinators"
  },
  {
    "name": "akka.parboiled2.RuleRunner"
  },
  {
    "name": "akka.parboiled2.RuleTrace$NonTerminalKey"
  },
  {
    "name": "akka.parboiled2.RuleTrace$NotPredicate$Base"
  },
  {
    "name": "akka.parboiled2.RuleTrace$Terminal"
  },
  {
    "name": "akka.parboiled2.RuleX"
  },
  {
    "name": "akka.parboiled2.support.AlternativeUnpacks"
  },
  {
    "name": "akka.parboiled2.support.Join$Aux1"
  },
  {
    "name": "akka.parboiled2.support.LowerPriorityHListable"
  },
  {
    "name": "akka.parboiled2.support.LowerPriorityLifter"
  },
  {
    "name": "akka.parboiled2.support.OpTreeContext"
  },
  {
    "name": "akka.parboiled2.support.OpTreeContext$OpTree"
  },
  {
    "name": "akka.parboiled2.support.RunResult$Aux2"
  },
  {
    "name": "akka.parboiled2.support.TailSwitch$Aux2"
  },
  {
    "name": "akka.parboiled2.support.Unpack"
  },
  {
    "name": "akka.parboiled2.support.Unpack$Aux"
  },
  {
    "name": "akka.pattern.AbstractCircuitBreaker"
  },
  {
    "name": "akka.pattern.AskSupport"
  },
  {
    "name": "akka.pattern.BackoffOptions"
  },
  {
    "name": "akka.pattern.BackoffReset"
  },
  {
    "name": "akka.pattern.BackoffType"
  },
  {
    "name": "akka.pattern.CircuitBreaker$State"
  },
  {
    "name": "akka.pattern.ExplicitAskSupport"
  },
  {
    "name": "akka.pattern.ExtendedBackoffOptions"
  },
  {
    "name": "akka.pattern.FutureRef"
  },
  {
    "name": "akka.pattern.FutureTimeoutSupport"
  },
  {
    "name": "akka.pattern.GracefulStopSupport"
  },
  {
    "name": "akka.pattern.HandleBackoff"
  },
  {
    "name": "akka.pattern.HandlingWhileStopped"
  },
  {
    "name": "akka.pattern.PipeToSupport"
  },
  {
    "name": "akka.pattern.PromiseActorRef",
    "fields": [
      {
        "name": "_stateDoNotCallMeDirectly"
      },
      {
        "name": "_watchedByDoNotCallMeDirectly"
      }
    ]
  },
  {
    "name": "akka.pattern.PromiseRef"
  },
  {
    "name": "akka.pattern.RetrySupport"
  },
  {
    "name": "akka.pattern.internal.CircuitBreakerTelemetry"
  },
  {
    "name": "akka.protobufv3.internal.AbstractMessage$BuilderParent"
  },
  {
    "name": "akka.protobufv3.internal.AbstractMessageLite$InternalOneOfEnum"
  },
  {
    "name": "akka.protobufv3.internal.AllocatedBuffer"
  },
  {
    "name": "akka.protobufv3.internal.BufferAllocator"
  },
  {
    "name": "akka.protobufv3.internal.ByteOutput"
  },
  {
    "name": "akka.protobufv3.internal.ByteString$ByteArrayCopier"
  },
  {
    "name": "akka.protobufv3.internal.CodedInputStream"
  },
  {
    "name": "akka.protobufv3.internal.CodedInputStream$StreamDecoder$RefillCallback"
  },
  {
    "name": "akka.protobufv3.internal.Descriptors$GenericDescriptor"
  },
  {
    "name": "akka.protobufv3.internal.ExtensionLite"
  },
  {
    "name": "akka.protobufv3.internal.ExtensionRegistryLite"
  },
  {
    "name": "akka.protobufv3.internal.ExtensionSchema"
  },
  {
    "name": "akka.protobufv3.internal.GeneratedMessage$ExtensionDescriptorRetriever"
  },
  {
    "name": "akka.protobufv3.internal.GeneratedMessage$FieldAccessorTable$FieldAccessor"
  },
  {
    "name": "akka.protobufv3.internal.GeneratedMessageV3$FieldAccessorTable$FieldAccessor"
  },
  {
    "name": "akka.protobufv3.internal.GeneratedMessageV3$FieldAccessorTable$RepeatedFieldAccessor$MethodInvoker"
  },
  {
    "name": "akka.protobufv3.internal.GeneratedMessageV3$FieldAccessorTable$SingularFieldAccessor$MethodInvoker"
  },
  {
    "name": "akka.protobufv3.internal.Internal$EnumLite"
  },
  {
    "name": "akka.protobufv3.internal.Internal$EnumLiteMap"
  },
  {
    "name": "akka.protobufv3.internal.Internal$EnumVerifier"
  },
  {
    "name": "akka.protobufv3.internal.Internal$MapAdapter$Converter"
  },
  {
    "name": "akka.protobufv3.internal.LazyFieldLite"
  },
  {
    "name": "akka.protobufv3.internal.ListFieldSchema"
  },
  {
    "name": "akka.protobufv3.internal.MapEntryLite$Metadata"
  },
  {
    "name": "akka.protobufv3.internal.MapField$Converter"
  },
  {
    "name": "akka.protobufv3.internal.MapFieldSchema"
  },
  {
    "name": "akka.protobufv3.internal.MessageInfo"
  },
  {
    "name": "akka.protobufv3.internal.MessageInfoFactory"
  },
  {
    "name": "akka.protobufv3.internal.MessageLiteOrBuilder"
  },
  {
    "name": "akka.protobufv3.internal.MessageReflection$MergeTarget"
  },
  {
    "name": "akka.protobufv3.internal.MutabilityOracle"
  },
  {
    "name": "akka.protobufv3.internal.NewInstanceSchema"
  },
  {
    "name": "akka.protobufv3.internal.Parser"
  },
  {
    "name": "akka.protobufv3.internal.PrimitiveNonBoxingCollection"
  },
  {
    "name": "akka.protobufv3.internal.Reader"
  },
  {
    "name": "akka.protobufv3.internal.RpcCallback"
  },
  {
    "name": "akka.protobufv3.internal.Schema"
  },
  {
    "name": "akka.protobufv3.internal.SchemaFactory"
  },
  {
    "name": "akka.protobufv3.internal.TextFormatEscaper$ByteSequence"
  },
  {
    "name": "akka.protobufv3.internal.UnknownFieldSchema"
  },
  {
    "name": "akka.protobufv3.internal.UnsafeUtil$MemoryAccessor"
  },
  {
    "name": "akka.protobufv3.internal.Utf8$Processor"
  },
  {
    "name": "akka.protobufv3.internal.Writer"
  },
  {
    "name": "akka.routing.ConsistentHashingPool",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "com.typesafe.config.Config"
        ]
      }
    ]
  },
  {
    "name": "akka.routing.ConsistentHashingRouter$ConsistentHashable"
  },
  {
    "name": "akka.routing.ListenerMessage"
  },
  {
    "name": "akka.routing.Listeners"
  },
  {
    "name": "akka.routing.Resizer"
  },
  {
    "name": "akka.routing.RoundRobinPool",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "com.typesafe.config.Config"
        ]
      }
    ]
  },
  {
    "name": "akka.routing.RoutedActorCell$RouterActorCreator",
    "queryAllDeclaredConstructors": true,
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "akka.routing.RouterConfig"
        ]
      }
    ]
  },
  {
    "name": "akka.routing.Routee"
  },
  {
    "name": "akka.routing.RouterManagementMesssage"
  },
  {
    "name": "akka.serialization.AsyncSerializer"
  },
  {
    "name": "akka.serialization.BooleanSerializer",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "akka.actor.ExtendedActorSystem"
        ]
      }
    ]
  },
  {
    "name": "akka.serialization.ByteArraySerializer",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "akka.actor.ExtendedActorSystem"
        ]
      }
    ]
  },
  {
    "name": "akka.serialization.ByteBufferSerializer"
  },
  {
    "name": "akka.serialization.ByteStringSerializer",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "akka.actor.ExtendedActorSystem"
        ]
      }
    ]
  },
  {
    "name": "akka.serialization.DisabledJavaSerializer",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "akka.actor.ExtendedActorSystem"
        ]
      }
    ]
  },
  {
    "name": "akka.serialization.IntSerializer",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "akka.actor.ExtendedActorSystem"
        ]
      }
    ]
  },
  {
    "name": "akka.serialization.LongSerializer",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "akka.actor.ExtendedActorSystem"
        ]
      }
    ]
  },
  {
    "name": "akka.serialization.SerializationExtension$",
    "fields": [
      {
        "name": "MODULE$"
      }
    ]
  },
  {
    "name": "akka.serialization.Serializer"
  },
  {
    "name": "akka.serialization.StringSerializer",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "akka.actor.ExtendedActorSystem"
        ]
      }
    ]
  },
  {
    "name": "akka.shapeless.DepFn1"
  },
  {
    "name": "akka.shapeless.DepFn2"
  },
  {
    "name": "akka.shapeless.HList"
  },
  {
    "name": "akka.shapeless.ops.hlist$IsHCons"
  },
  {
    "name": "akka.shapeless.ops.hlist$LowPriorityPrepend"
  },
  {
    "name": "akka.shapeless.ops.hlist$LowPriorityReversePrepend"
  },
  {
    "name": "akka.shapeless.ops.hlist$Reverse$Reverse0"
  },
  {
    "name": "akka.stream.Attributes$Attribute"
  },
  {
    "name": "akka.stream.Attributes$CancellationStrategy$Strategy"
  },
  {
    "name": "akka.stream.BoundedSourceQueue"
  },
  {
    "name": "akka.stream.CompletionStrategy"
  },
  {
    "name": "akka.stream.FanInShape$Init"
  },
  {
    "name": "akka.stream.FanOutShape$Init"
  },
  {
    "name": "akka.stream.FlowMonitor"
  },
  {
    "name": "akka.stream.FlowMonitorState$StreamState"
  },
  {
    "name": "akka.stream.Graph"
  },
  {
    "name": "akka.stream.InPort"
  },
  {
    "name": "akka.stream.KillSwitch"
  },
  {
    "name": "akka.stream.Materializer"
  },
  {
    "name": "akka.stream.MaterializerLoggingProvider"
  },
  {
    "name": "akka.stream.OutPort"
  },
  {
    "name": "akka.stream.QueueOfferResult"
  },
  {
    "name": "akka.stream.Shape"
  },
  {
    "name": "akka.stream.SinkRef"
  },
  {
    "name": "akka.stream.SourceRef"
  },
  {
    "name": "akka.stream.StreamRefSettings"
  },
  {
    "name": "akka.stream.StreamSubscriptionTimeoutTerminationMode"
  },
  {
    "name": "akka.stream.SubstreamCancelStrategy"
  },
  {
    "name": "akka.stream.Supervision$Directive"
  },
  {
    "name": "akka.stream.SystemMaterializer$",
    "fields": [
      {
        "name": "MODULE$"
      }
    ]
  },
  {
    "name": "akka.stream.TLSClientAuth"
  },
  {
    "name": "akka.stream.TLSClosing"
  },
  {
    "name": "akka.stream.TLSProtocol$SslTlsInbound"
  },
  {
    "name": "akka.stream.TLSProtocol$SslTlsOutbound"
  },
  {
    "name": "akka.stream.TLSRole"
  },
  {
    "name": "akka.stream.ThrottleMode"
  },
  {
    "name": "akka.stream.impl.ActorRefBackpressureSource$ActorRefStage"
  },
  {
    "name": "akka.stream.impl.ActorRefSource$ActorRefStage"
  },
  {
    "name": "akka.stream.impl.BoundedSourceQueueStage$State"
  },
  {
    "name": "akka.stream.impl.Buffer"
  },
  {
    "name": "akka.stream.impl.CollectorState"
  },
  {
    "name": "akka.stream.impl.ContextPropagation"
  },
  {
    "name": "akka.stream.impl.FanIn$InputBunch"
  },
  {
    "name": "akka.stream.impl.Inputs"
  },
  {
    "name": "akka.stream.impl.IslandTag"
  },
  {
    "name": "akka.stream.impl.Outputs"
  },
  {
    "name": "akka.stream.impl.Phase"
  },
  {
    "name": "akka.stream.impl.PhaseIsland"
  },
  {
    "name": "akka.stream.impl.Pump"
  },
  {
    "name": "akka.stream.impl.QueueSink$Output"
  },
  {
    "name": "akka.stream.impl.QueueSource$Input"
  },
  {
    "name": "akka.stream.impl.ReactiveStreamsCompliance$SpecViolation"
  },
  {
    "name": "akka.stream.impl.ReducerState"
  },
  {
    "name": "akka.stream.impl.ResizableMultiReaderRingBuffer$Cursor"
  },
  {
    "name": "akka.stream.impl.ResizableMultiReaderRingBuffer$Cursors"
  },
  {
    "name": "akka.stream.impl.SeqActorName"
  },
  {
    "name": "akka.stream.impl.SubFlowImpl$MergeBack"
  },
  {
    "name": "akka.stream.impl.SubscriberManagement$EndOfStream"
  },
  {
    "name": "akka.stream.impl.TransferState"
  },
  {
    "name": "akka.stream.impl.Traversal"
  },
  {
    "name": "akka.stream.impl.TraversalBuildStep"
  },
  {
    "name": "akka.stream.impl.TraversalBuilder"
  },
  {
    "name": "akka.stream.impl.VirtualProcessor$HasActualSubscriber"
  },
  {
    "name": "akka.stream.impl.VirtualProcessor$WrappedSubscription$SubscriptionState"
  },
  {
    "name": "akka.stream.impl.fusing.Split$SplitDecision"
  },
  {
    "name": "akka.stream.impl.fusing.SubSink$Command"
  },
  {
    "name": "akka.stream.impl.fusing.SubSink$State"
  },
  {
    "name": "akka.stream.impl.io.ByteStringParser$ParseStep"
  },
  {
    "name": "akka.stream.impl.io.InputStreamSinkStage$AdapterToStageMessage"
  },
  {
    "name": "akka.stream.impl.io.InputStreamSinkStage$StageWithCallback"
  },
  {
    "name": "akka.stream.impl.io.InputStreamSinkStage$StreamToAdapterMessage"
  },
  {
    "name": "akka.stream.impl.io.OutputStreamSourceStage$AdapterToStageMessage"
  },
  {
    "name": "akka.stream.impl.io.TcpConnectionStage$TcpRole"
  },
  {
    "name": "akka.stream.impl.io.compression.Compressor"
  },
  {
    "name": "akka.stream.impl.streamref.SinkRefStageImpl$ActorRefStage"
  },
  {
    "name": "akka.stream.impl.streamref.SourceRefStageImpl$ActorRefStage"
  },
  {
    "name": "akka.stream.impl.streamref.SourceRefStageImpl$State"
  },
  {
    "name": "akka.stream.impl.streamref.StreamRefsProtocol"
  },
  {
    "name": "akka.stream.javadsl.DelayStrategy"
  },
  {
    "name": "akka.stream.javadsl.GraphCreate"
  },
  {
    "name": "akka.stream.javadsl.MergeHub$DrainingControl"
  },
  {
    "name": "akka.stream.javadsl.PartitionHub$ConsumerInfo"
  },
  {
    "name": "akka.stream.javadsl.SinkQueue"
  },
  {
    "name": "akka.stream.javadsl.SourceQueue"
  },
  {
    "name": "akka.stream.scaladsl.BroadcastHub$ConsumerEvent"
  },
  {
    "name": "akka.stream.scaladsl.BroadcastHub$HubEvent"
  },
  {
    "name": "akka.stream.scaladsl.BroadcastHub$HubState"
  },
  {
    "name": "akka.stream.scaladsl.DelayStrategy"
  },
  {
    "name": "akka.stream.scaladsl.FlowOps"
  },
  {
    "name": "akka.stream.scaladsl.FlowWithContextOps"
  },
  {
    "name": "akka.stream.scaladsl.GraphApply"
  },
  {
    "name": "akka.stream.scaladsl.GraphDSL$Implicits$CombinerBase"
  },
  {
    "name": "akka.stream.scaladsl.GraphDSL$Implicits$ReverseCombinerBase"
  },
  {
    "name": "akka.stream.scaladsl.MergeHub$DrainingControl"
  },
  {
    "name": "akka.stream.scaladsl.MergeHub$Event"
  },
  {
    "name": "akka.stream.scaladsl.PartitionHub$Internal$ConsumerEvent"
  },
  {
    "name": "akka.stream.scaladsl.PartitionHub$Internal$HubEvent"
  },
  {
    "name": "akka.stream.scaladsl.PartitionHub$Internal$HubState"
  },
  {
    "name": "akka.stream.scaladsl.PartitionHub$Internal$PartitionQueue"
  },
  {
    "name": "akka.stream.scaladsl.ScalaSessionAPI"
  },
  {
    "name": "akka.stream.scaladsl.SinkQueue"
  },
  {
    "name": "akka.stream.scaladsl.SourceQueue"
  },
  {
    "name": "akka.stream.scaladsl.UnzipWithApply"
  },
  {
    "name": "akka.stream.scaladsl.UnzipWithApply$UnzipWithCreator"
  },
  {
    "name": "akka.stream.scaladsl.ZipLatestWithApply"
  },
  {
    "name": "akka.stream.scaladsl.ZipWithApply"
  },
  {
    "name": "akka.stream.serialization.StreamRefSerializer",
    "methods": [
      {
        "name": "<init>",
        "parameterTypes": [
          "akka.actor.ExtendedActorSystem"
        ]
      }
    ]
  },
  {
    "name": "akka.stream.snapshot.ConnectionSnapshot"
  },
  {
    "name": "akka.stream.snapshot.ConnectionSnapshot$ConnectionState"
  },
  {
    "name": "akka.stream.snapshot.HideImpl"
  },
  {
    "name": "akka.stream.snapshot.InterpreterSnapshot"
  },
  {
    "name": "akka.stream.snapshot.LogicSnapshot"
  },
  {
    "name": "akka.stream.snapshot.StreamSnapshot"
  },
  {
    "name": "akka.stream.stage.AsyncCallback"
  },
  {
    "name": "akka.stream.stage.ConcurrentAsyncCallbackState$State"
  },
  {
    "name": "akka.stream.stage.GraphStageLogic"
  },
  {
    "name": "akka.stream.stage.GraphStageLogic$SubSourceOutlet"
  },
  {
    "name": "akka.stream.stage.InHandler"
  },
  {
    "name": "akka.stream.stage.OutHandler"
  },
  {
    "name": "akka.stream.stage.StageLogging"
  },
  {
    "name": "akka.util.ByteString$ByteString1"
  },
  {
    "name": "akka.util.ByteString$ByteString1C"
  },
  {
    "name": "akka.util.ByteString$ByteStrings"
  },
  {
    "name": "akka.util.ByteString$Companion"
  },
  {
    "name": "akka.util.FrequencySketch$Hasher"
  },
  {
    "name": "akka.util.Index"
  },
  {
    "name": "akka.util.LineNumbers$Result"
  },
  {
    "name": "akka.util.PriorityQueueStabilizer"
  },
  {
    "name": "akka.util.RecencyList$Clock"
  },
  {
    "name": "akka.util.Subclassification"
  },
  {
    "name": "akka.util.SubclassifiedIndex"
  },
  {
    "name": "akka.util.TokenBucket"
  },
  {
    "name": "akka.util.WallClock"
  },
  {
    "name": "[Lakka.actor.LightArrayRevolverScheduler$TaskQueue;"
  },
  {
    "name": "[Lakka.stream.stage.GraphStageLogic;"
  },
  {
    "name": "com.typesafe.sslconfig.akka.SSLEngineConfigurator"
  },
  {
    "name": "sttp.capabilities.akka.AkkaStreams"
  },
  {
    "name": "sttp.apispec.ExampleValue"
  },
  {
    "name": "sttp.apispec.SchemaLike"
  },
  {
    "name": "sttp.apispec.SchemaType"
  },
  {
    "name": "sttp.apispec.asyncapi.ChannelBinding"
  },
  {
    "name": "sttp.apispec.asyncapi.Message"
  },
  {
    "name": "sttp.apispec.asyncapi.MessageBinding"
  },
  {
    "name": "sttp.apispec.asyncapi.OperationBinding"
  },
  {
    "name": "sttp.apispec.asyncapi.ServerBinding"
  },
  {
    "name": "sttp.apispec.internal.JsonSchemaCirceDecoders"
  },
  {
    "name": "sttp.apispec.internal.JsonSchemaCirceEncoders"
  },
  {
    "name": "sttp.apispec.openapi.ParameterIn"
  },
  {
    "name": "sttp.apispec.openapi.ParameterStyle"
  },
  {
    "name": "sttp.apispec.openapi.ResponsesKey"
  },
  {
    "name": "sttp.apispec.openapi.circe.yaml.SttpOpenAPICirceYaml"
  },

  {
    "name": "sttp.capabilities.package$Streams"
  },
  {
    "name": "sttp.client3.RequestBody"
  },
  {
    "name": "sttp.client3.RequestTExtensions"
  },
  {
    "name": "sttp.client3.ResponseAs"
  },
  {
    "name": "sttp.client3.ShowError"
  },
  {
    "name": "sttp.client3.SttpBackend"
  },
  {
    "name": "sttp.client3.SttpBackendOptions$ProxyType"
  },
  {
    "name": "sttp.client3.SttpClientExceptionExtensions"
  },
  {
    "name": "sttp.client3.SttpExtensions"
  },
  {
    "name": "sttp.client3.akkahttp.AkkaHttpClient"
  },
  {
    "name": "sttp.client3.internal.BodyFromResponseAs"
  },
  {
    "name": "sttp.client3.internal.NoStreams"
  },
  {
    "name": "sttp.client3.internal.Parser"
  },
  {
    "name": "sttp.client3.internal.SttpFileCompanionExtensions"
  },
  {
    "name": "sttp.client3.internal.SttpFileExtensions"
  },
  {
    "name": "sttp.client3.internal.httpclient.BodyFromHttpClient"
  },
  {
    "name": "sttp.client3.internal.httpclient.BodyToHttpClient"
  },
  {
    "name": "sttp.client3.internal.httpclient.Sequencer"
  },
  {
    "name": "sttp.client3.internal.ws.SimpleQueue"
  },
  {
    "name": "sttp.client3.internal.ws.WebSocketEvent"
  },
  {
    "name": "sttp.client3.listener.RequestListener"
  },
  {
    "name": "sttp.client3.logging.Log"
  },
  {
    "name": "sttp.client3.logging.LogLevel"
  },
  {
    "name": "sttp.client3.monad.FunctionK"
  },
  {
    "name": "sttp.model.ContentRangeUnits"
  },
  {
    "name": "sttp.model.Encodings"
  },
  {
    "name": "sttp.model.HasHeaders"
  },
  {
    "name": "sttp.model.HeaderNames"
  },
  {
    "name": "sttp.model.HttpVersion"
  },
  {
    "name": "sttp.model.MediaTypes"
  },
  {
    "name": "sttp.model.Methods"
  },
  {
    "name": "sttp.model.StatusCodes"
  },
  {
    "name": "sttp.model.Uri$PathSegments"
  },
  {
    "name": "sttp.model.Uri$QuerySegment"
  },
  {
    "name": "sttp.model.UriInterpolator"
  },
  {
    "name": "sttp.model.UriInterpolator$Token"
  },
  {
    "name": "sttp.model.UriInterpolator$Tokenizer"
  },
  {
    "name": "sttp.model.UriInterpolator$UriBuilder"
  },
  {
    "name": "sttp.model.headers.AuthenticationScheme"
  },
  {
    "name": "sttp.model.headers.CacheDirective"
  },
  {
    "name": "sttp.model.headers.Cookie$SameSite"
  },
  {
    "name": "sttp.model.headers.Origin"
  },
  {
    "name": "sttp.monad.MonadError"
  },
  {
    "name": "sttp.tapir.Codec"
  },
  {
    "name": "sttp.tapir.CodecExtensions"
  },
  {
    "name": "sttp.tapir.CodecExtensions2"
  },
  {
    "name": "sttp.tapir.CodecFormat"
  },
  {
    "name": "sttp.tapir.DecodeResult"
  },
  {
    "name": "sttp.tapir.EndpointErrorOutputVariantsOps"
  },
  {
    "name": "sttp.tapir.EndpointInfoOps"
  },
  {
    "name": "sttp.tapir.EndpointInput$AuthType"
  },
  {
    "name": "sttp.tapir.EndpointMetaOps"
  },
  {
    "name": "sttp.tapir.EndpointServerLogicOps"
  },
  {
    "name": "sttp.tapir.LowPriorityCodec"
  },
  {
    "name": "sttp.tapir.LowPrioritySchema"
  },
  {
    "name": "sttp.tapir.Mapping"
  },
  {
    "name": "sttp.tapir.RawBodyType"
  },
  {
    "name": "sttp.tapir.SchemaType"
  },
  {
    "name": "sttp.tapir.TapirComputedInputs"
  },
  {
    "name": "sttp.tapir.TapirExtensions"
  },
  {
    "name": "sttp.tapir.ValidationResult"
  },
  {
    "name": "sttp.tapir.Validator"
  },
  {
    "name": "sttp.tapir.capabilities.NoStreams"
  },
  {
    "name": "sttp.tapir.client.ClientOutputParams"
  },
  {
    "name": "sttp.tapir.client.sttp.EndpointToSttpClientExtensions"
  },
  {
    "name": "sttp.tapir.client.sttp.SttpClientInterpreterExtensions"
  },
  {
    "name": "sttp.tapir.client.sttp.WebSocketToPipe"
  },
  {
    "name": "sttp.tapir.client.sttp.ws.akkahttp.TapirSttpClientAkkaHttpWebSockets"
  },
  {
    "name": "sttp.tapir.client.sttp.ws.fs2.TapirSttpClientFs2WebSockets"
  },
  {
    "name": "sttp.tapir.client.sttp.ws.zio.TapirSttpClientZioWebSockets"
  },
  {
    "name": "sttp.tapir.codec.enumeratum.TapirCodecEnumeratum"
  },
  {
    "name": "sttp.tapir.docs.apispec.schema.MetaSchema"
  },
  {
    "name": "sttp.tapir.docs.openapi.OpenAPIDocsInterpreter"
  },
  {
    "name": "sttp.tapir.files.StaticErrorOutput"
  },
  {
    "name": "sttp.tapir.files.StaticOutput"
  },
  {
    "name": "sttp.tapir.files.TapirStaticContentEndpoints"
  },
  {
    "name": "sttp.tapir.generic.auto.SchemaMagnoliaDerivation"
  },
  {
    "name": "sttp.tapir.internal.EndpointAnnotationsMacro"
  },
  {
    "name": "sttp.tapir.internal.ModifySchemaMacro$PathElement$1"
  },
  {
    "name": "sttp.tapir.internal.package$Params"
  },
  {
    "name": "sttp.tapir.json.circe.TapirJsonCirce"
  },
  {
    "name": "sttp.tapir.macros.AttributeKeyMacros"
  },
  {
    "name": "sttp.tapir.macros.CodecMacros"
  },
  {
    "name": "sttp.tapir.macros.EndpointErrorOutputsMacros"
  },
  {
    "name": "sttp.tapir.macros.EndpointInputMacros"
  },
  {
    "name": "sttp.tapir.macros.EndpointInputsMacros"
  },
  {
    "name": "sttp.tapir.macros.EndpointOutputMacros"
  },
  {
    "name": "sttp.tapir.macros.EndpointOutputsMacros"
  },
  {
    "name": "sttp.tapir.macros.EndpointSecurityInputsMacros"
  },
  {
    "name": "sttp.tapir.macros.EndpointTransputMacros"
  },
  {
    "name": "sttp.tapir.macros.ErasureSameAsTypeMacros"
  },
  {
    "name": "sttp.tapir.macros.FormCodecMacros"
  },
  {
    "name": "sttp.tapir.macros.ModifyMacroFunctorSupport"
  },
  {
    "name": "sttp.tapir.macros.ModifyMacroFunctorSupport$ModifyFunctor"
  },
  {
    "name": "sttp.tapir.macros.MultipartCodecMacros"
  },
  {
    "name": "sttp.tapir.macros.SchemaAnnotationsMacros"
  },
  {
    "name": "sttp.tapir.macros.SchemaMacros"
  },
  {
    "name": "sttp.tapir.macros.ValidatorMacros"
  },
  {
    "name": "sttp.tapir.model.StatusCodeRange"
  },
  {
    "name": "sttp.tapir.server.akkahttp.AkkaHttpServerInterpreter"
  },
  {
    "name": "sttp.tapir.server.interceptor.EndpointHandler"
  },
  {
    "name": "sttp.tapir.server.interceptor.Interceptor"
  },
  {
    "name": "sttp.tapir.server.interceptor.RequestHandler"
  },
  {
    "name": "sttp.tapir.server.interceptor.RequestResult"
  },
  {
    "name": "sttp.tapir.server.interceptor.Responder"
  },
  {
    "name": "sttp.tapir.server.interceptor.cors.CORSConfig$AllowedCredentials"
  },
  {
    "name": "sttp.tapir.server.interceptor.cors.CORSConfig$AllowedHeaders"
  },
  {
    "name": "sttp.tapir.server.interceptor.cors.CORSConfig$AllowedMethods"
  },
  {
    "name": "sttp.tapir.server.interceptor.cors.CORSConfig$AllowedOrigin"
  },
  {
    "name": "sttp.tapir.server.interceptor.cors.CORSConfig$ExposedHeaders"
  },
  {
    "name": "sttp.tapir.server.interceptor.cors.CORSConfig$MaxAge"
  },
  {
    "name": "sttp.tapir.server.interceptor.decodefailure.DecodeFailureHandler"
  },
  {
    "name": "sttp.tapir.server.interceptor.exception.ExceptionHandler"
  },
  {
    "name": "sttp.tapir.server.interceptor.log.ServerLog"
  },
  {
    "name": "sttp.tapir.server.interceptor.reject.RejectHandler"
  },
  {
    "name": "sttp.tapir.server.interpreter.BodyListener"
  },
  {
    "name": "sttp.tapir.server.interpreter.DecodeBasicInputsResult"
  },
  {
    "name": "sttp.tapir.server.interpreter.FilterServerEndpoints$PathSegment"
  },
  {
    "name": "sttp.tapir.server.interpreter.InputValueResult"
  },
  {
    "name": "sttp.tapir.server.interpreter.PathLayer"
  },
  {
    "name": "sttp.tapir.server.interpreter.RequestBody"
  },
  {
    "name": "sttp.tapir.server.interpreter.ServerInterpreter$ResultOrValueFrom"
  },
  {
    "name": "sttp.tapir.server.interpreter.ToResponseBody"
  },
  {
    "name": "sttp.tapir.static.HeadOutput"
  },
  {
    "name": "sttp.tapir.static.StaticErrorOutput"
  },
  {
    "name": "sttp.tapir.static.StaticOutput"
  },
  {
    "name": "sttp.tapir.static.TapirStaticContentEndpoints"
  },
  {
    "name": "sttp.tapir.swagger.bundle.SwaggerInterpreter"
  },
  {
    "name": "sttp.tapir.typelevel.BinaryPolyFunc"
  },
  {
    "name": "sttp.tapir.typelevel.BinaryPolyFunc$Case"
  },
  {
    "name": "sttp.tapir.typelevel.BinaryTupleOp"
  },
  {
    "name": "sttp.tapir.typelevel.LowPriorityTupleArity"
  },
  {
    "name": "sttp.tapir.typelevel.LowPriorityTupleConcat0"
  },
  {
    "name": "sttp.tapir.typelevel.MatchType"
  },
  {
    "name": "sttp.tapir.typelevel.MatchTypeMagnoliaDerivation"
  },
  {
    "name": "sttp.tapir.typelevel.TupleAppendOneInstances"
  },
  {
    "name": "sttp.tapir.typelevel.TupleArity"
  },
  {
    "name": "sttp.tapir.typelevel.TupleFoldInstances"
  },
  {
    "name": "sttp.tapir.typelevel.TupleOps$AppendOne"
  },
  {
    "name": "sttp.tapir.typelevel.TupleOps$FoldLeft"
  },
  {
    "name": "sttp.tapir.typelevel.TupleOps$Join"
  },
  {
    "name": "sttp.tapir.typelevel.TupleOps$LowLevelJoinImplicits"
  },
  {
    "name": "sttp.ws.WebSocket"
  },
  {
    "name": "sttp.ws.WebSocketFrame"
  }
]
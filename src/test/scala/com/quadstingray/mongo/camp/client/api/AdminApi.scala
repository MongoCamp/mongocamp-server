/** mongocamp No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
  *
  * The version of the OpenAPI document: 0.3.5-SNAPSHOT
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech). https://openapi-generator.tech Do not edit the class manually.
  */
package com.quadstingray.mongo.camp.client.api

import com.quadstingray.mongo.camp.client.core.JsonSupport._
import com.quadstingray.mongo.camp.client.model._
import com.quadstingray.mongo.camp.converter.CirceSchema
import sttp.client3._
import sttp.client3.circe.asJson
import sttp.model.Method

object AdminApi {
  def apply(baseUrl: String = com.quadstingray.mongo.camp.server.TestServer.serverBaseUrl) = new AdminApi(baseUrl)
}

class AdminApi(baseUrl: String) extends CirceSchema {

  /** Add a new User
    *
    * Expected answers: code 200 : UserProfile code 400 : String (Invalid value for: body) code 0 : ErrorDescription Headers : x-error-code - Error Code
    * x-error-message - Message of the MongoCampException x-error-additional-info - Additional information for the MongoCampException
    *
    * Available security schemes: apiKeyAuth (apiKey) httpAuth (http)
    *
    * @param userInformation
    */
  def addUser(apiKey: String, bearerToken: String)(userInformation: UserInformation) =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/admin/users")
      .contentType("application/json")
      .header("X-AUTH-APIKEY", apiKey)
      .auth
      .bearer(bearerToken)
      .body(userInformation)
      .response(asJson[UserProfile])

  /** Add a new UserRole
    *
    * Expected answers: code 200 : UserRole code 400 : String (Invalid value for: body) code 0 : ErrorDescription Headers : x-error-code - Error Code
    * x-error-message - Message of the MongoCampException x-error-additional-info - Additional information for the MongoCampException
    *
    * Available security schemes: apiKeyAuth (apiKey) httpAuth (http)
    *
    * @param userRole
    */
  def addUserRoles(apiKey: String, bearerToken: String)(userRole: UserRole) =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/admin/userroles")
      .contentType("application/json")
      .header("X-AUTH-APIKEY", apiKey)
      .auth
      .bearer(bearerToken)
      .body(userRole)
      .response(asJson[UserRole])

  /** Delete User
    *
    * Expected answers: code 200 : JsonResultBoolean code 0 : ErrorDescription Headers : x-error-code - Error Code x-error-message - Message of the
    * MongoCampException x-error-additional-info - Additional information for the MongoCampException
    *
    * Available security schemes: apiKeyAuth (apiKey) httpAuth (http)
    *
    * @param userId
    *   UserId to Delete
    */
  def deleteUser(apiKey: String, bearerToken: String)(userId: String) =
    basicRequest
      .method(Method.DELETE, uri"$baseUrl/admin/users/$userId")
      .contentType("application/json")
      .header("X-AUTH-APIKEY", apiKey)
      .auth
      .bearer(bearerToken)
      .response(asJson[JsonResultBoolean])

  /** Delete UserRole
    *
    * Expected answers: code 200 : JsonResultBoolean code 0 : ErrorDescription Headers : x-error-code - Error Code x-error-message - Message of the
    * MongoCampException x-error-additional-info - Additional information for the MongoCampException
    *
    * Available security schemes: apiKeyAuth (apiKey) httpAuth (http)
    *
    * @param userRoleName
    *   UserRoleKey
    */
  def deleteUserRoles(apiKey: String, bearerToken: String)(userRoleName: String) =
    basicRequest
      .method(Method.DELETE, uri"$baseUrl/admin/userroles/$userRoleName")
      .contentType("application/json")
      .header("X-AUTH-APIKEY", apiKey)
      .auth
      .bearer(bearerToken)
      .response(asJson[JsonResultBoolean])

  /** Get UserProfile for user
    *
    * Expected answers: code 200 : UserProfile code 0 : ErrorDescription Headers : x-error-code - Error Code x-error-message - Message of the MongoCampException
    * x-error-additional-info - Additional information for the MongoCampException
    *
    * Available security schemes: apiKeyAuth (apiKey) httpAuth (http)
    *
    * @param userId
    *   UserId to Update
    */
  def getUser(apiKey: String, bearerToken: String)(userId: String) =
    basicRequest
      .method(Method.GET, uri"$baseUrl/admin/users/$userId")
      .contentType("application/json")
      .header("X-AUTH-APIKEY", apiKey)
      .auth
      .bearer(bearerToken)
      .response(asJson[UserProfile])

  /** Get UserRole
    *
    * Expected answers: code 200 : UserRole code 0 : ErrorDescription Headers : x-error-code - Error Code x-error-message - Message of the MongoCampException
    * x-error-additional-info - Additional information for the MongoCampException
    *
    * Available security schemes: apiKeyAuth (apiKey) httpAuth (http)
    *
    * @param userRoleName
    *   UserRoleKey
    */
  def getUserRoles(apiKey: String, bearerToken: String)(userRoleName: String) =
    basicRequest
      .method(Method.GET, uri"$baseUrl/admin/userroles/$userRoleName")
      .contentType("application/json")
      .header("X-AUTH-APIKEY", apiKey)
      .auth
      .bearer(bearerToken)
      .response(asJson[UserRole])

  /** List all UserRolss or filtered
    *
    * Expected answers: code 200 : Seq[UserRole] Headers : x-pagination-count-rows - count all elements x-pagination-rows-per-page - Count elements per page
    * x-pagination-current-page - Current page x-pagination-count-pages - Count pages code 400 : String (Invalid value for: query parameter filter, Invalid
    * value for: query parameter rowsPerPage, Invalid value for: query parameter page) code 0 : ErrorDescription Headers : x-error-code - Error Code
    * x-error-message - Message of the MongoCampException x-error-additional-info - Additional information for the MongoCampException
    *
    * Available security schemes: apiKeyAuth (apiKey) httpAuth (http)
    *
    * @param filter
    *   filter after userId by contains
    * @param rowsPerPage
    *   Count elements per page
    * @param page
    *   Requested page of the ResultSets
    */
  def listUserRoles(apiKey: String, bearerToken: String)(
      filter: Option[String] = None,
      rowsPerPage: Option[Long] = None,
      page: Option[Long] = None
  ) =
    basicRequest
      .method(Method.GET, uri"$baseUrl/admin/userroles?filter=$filter&rowsPerPage=$rowsPerPage&page=$page")
      .contentType("application/json")
      .header("X-AUTH-APIKEY", apiKey)
      .auth
      .bearer(bearerToken)
      .response(asJson[Seq[UserRole]])

  /** List all Users or filtered
    *
    * Expected answers: code 200 : Seq[UserProfile] Headers : x-pagination-count-rows - count all elements x-pagination-rows-per-page - Count elements per page
    * x-pagination-current-page - Current page x-pagination-count-pages - Count pages code 400 : String (Invalid value for: query parameter filter, Invalid
    * value for: query parameter rowsPerPage, Invalid value for: query parameter page) code 0 : ErrorDescription Headers : x-error-code - Error Code
    * x-error-message - Message of the MongoCampException x-error-additional-info - Additional information for the MongoCampException
    *
    * Available security schemes: apiKeyAuth (apiKey) httpAuth (http)
    *
    * @param filter
    *   filter after userId by contains
    * @param rowsPerPage
    *   Count elements per page
    * @param page
    *   Requested page of the ResultSets
    */
  def listUsers(apiKey: String, bearerToken: String)(
      filter: Option[String] = None,
      rowsPerPage: Option[Long] = None,
      page: Option[Long] = None
  ) =
    basicRequest
      .method(Method.GET, uri"$baseUrl/admin/users?filter=$filter&rowsPerPage=$rowsPerPage&page=$page")
      .contentType("application/json")
      .header("X-AUTH-APIKEY", apiKey)
      .auth
      .bearer(bearerToken)
      .response(asJson[Seq[UserProfile]])

  /** Change Password of User
    *
    * Expected answers: code 200 : JsonResultString code 0 : ErrorDescription Headers : x-error-code - Error Code x-error-message - Message of the
    * MongoCampException x-error-additional-info - Additional information for the MongoCampException
    *
    * Available security schemes: apiKeyAuth (apiKey) httpAuth (http)
    *
    * @param userId
    *   UserId to Update
    */
  def updateApiKeyForUser(apiKey: String, bearerToken: String)(userId: String) =
    basicRequest
      .method(Method.PATCH, uri"$baseUrl/admin/users/$userId/apikey")
      .contentType("application/json")
      .header("X-AUTH-APIKEY", apiKey)
      .auth
      .bearer(bearerToken)
      .response(asJson[JsonResultString])

  /** Change Password of User
    *
    * Expected answers: code 200 : JsonResultBoolean code 400 : String (Invalid value for: body) code 0 : ErrorDescription Headers : x-error-code - Error Code
    * x-error-message - Message of the MongoCampException x-error-additional-info - Additional information for the MongoCampException
    *
    * Available security schemes: apiKeyAuth (apiKey) httpAuth (http)
    *
    * @param userId
    *   UserId to Update
    * @param passwordUpdateRequest
    */
  def updatePasswordForUser(
      apiKey: String,
      bearerToken: String
  )(userId: String, passwordUpdateRequest: PasswordUpdateRequest) =
    basicRequest
      .method(Method.PATCH, uri"$baseUrl/admin/users/$userId/password")
      .contentType("application/json")
      .header("X-AUTH-APIKEY", apiKey)
      .auth
      .bearer(bearerToken)
      .body(passwordUpdateRequest)
      .response(asJson[JsonResultBoolean])

  /** Update UserRole
    *
    * Expected answers: code 200 : UserRole code 400 : String (Invalid value for: body) code 0 : ErrorDescription Headers : x-error-code - Error Code
    * x-error-message - Message of the MongoCampException x-error-additional-info - Additional information for the MongoCampException
    *
    * Available security schemes: apiKeyAuth (apiKey) httpAuth (http)
    *
    * @param userRoleName
    *   UserRoleKey
    * @param updateUserRoleRequest
    */
  def updateUserRole(
      apiKey: String,
      bearerToken: String
  )(userRoleName: String, updateUserRoleRequest: UpdateUserRoleRequest) =
    basicRequest
      .method(Method.PATCH, uri"$baseUrl/admin/userroles/$userRoleName")
      .contentType("application/json")
      .header("X-AUTH-APIKEY", apiKey)
      .auth
      .bearer(bearerToken)
      .body(updateUserRoleRequest)
      .response(asJson[UserRole])

  /** Update UserRoles of User
    *
    * Expected answers: code 200 : UserProfile code 400 : String (Invalid value for: body) code 0 : ErrorDescription Headers : x-error-code - Error Code
    * x-error-message - Message of the MongoCampException x-error-additional-info - Additional information for the MongoCampException
    *
    * Available security schemes: apiKeyAuth (apiKey) httpAuth (http)
    *
    * @param userId
    *   UserId to Update
    * @param requestBody
    */
  def updateUserRolesForUser(
      apiKey: String,
      bearerToken: String
  )(userId: String, requestBody: Seq[String]) =
    basicRequest
      .method(Method.PATCH, uri"$baseUrl/admin/users/$userId/userroles")
      .contentType("application/json")
      .header("X-AUTH-APIKEY", apiKey)
      .auth
      .bearer(bearerToken)
      .body(requestBody)
      .response(asJson[UserProfile])

}

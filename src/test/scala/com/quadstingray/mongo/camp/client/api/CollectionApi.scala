/** mongocamp No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
  *
  * The version of the OpenAPI document: 0.3.5-SNAPSHOT
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech). https://openapi-generator.tech Do not edit the class manually.
  */
package com.quadstingray.mongo.camp.client.api

import com.quadstingray.mongo.camp.client.core.JsonSupport._
import com.quadstingray.mongo.camp.client.model._
import com.quadstingray.mongo.camp.converter.CirceSchema
import sttp.client3._
import sttp.client3.circe.asJson
import sttp.model.Method

object CollectionApi {
  def apply(baseUrl: String = com.quadstingray.mongo.camp.server.TestServer.serverBaseUrl) = new CollectionApi(baseUrl)
}

class CollectionApi(baseUrl: String) extends CirceSchema {

  /** Delete all Document in Collection
    *
    * Expected answers: code 200 : DeleteResponse code 0 : ErrorDescription Headers : x-error-code - Error Code x-error-message - Message of the
    * MongoCampException x-error-additional-info - Additional information for the MongoCampException
    *
    * Available security schemes: apiKeyAuth (apiKey) httpAuth (http)
    *
    * @param collectionName
    *   The name of your MongoDb Collection
    */
  def clearCollection(apiKey: String, bearerToken: String)(collectionName: String) =
    basicRequest
      .method(Method.DELETE, uri"$baseUrl/mongodb/collections/$collectionName/clear")
      .contentType("application/json")
      .header("X-AUTH-APIKEY", apiKey)
      .auth
      .bearer(bearerToken)
      .response(asJson[DeleteResponse])

  /** All Informations about a single Collection
    *
    * Expected answers: code 200 : CollectionStatus code 400 : String (Invalid value for: query parameter includeDetails) code 0 : ErrorDescription Headers :
    * x-error-code - Error Code x-error-message - Message of the MongoCampException x-error-additional-info - Additional information for the MongoCampException
    *
    * Available security schemes: apiKeyAuth (apiKey) httpAuth (http)
    *
    * @param collectionName
    *   The name of your MongoDb Collection
    * @param includeDetails
    *   Include all details for the Collection
    */
  def collectionInformation(
      apiKey: String,
      bearerToken: String
  )(collectionName: String, includeDetails: Option[Boolean] = None) =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mongodb/collections/$collectionName?includeDetails=$includeDetails")
      .contentType("application/json")
      .header("X-AUTH-APIKEY", apiKey)
      .auth
      .bearer(bearerToken)
      .response(asJson[CollectionStatus])

  /** List of all Collections
    *
    * Expected answers: code 200 : Seq[String] code 0 : ErrorDescription Headers : x-error-code - Error Code x-error-message - Message of the MongoCampException
    * x-error-additional-info - Additional information for the MongoCampException
    *
    * Available security schemes: apiKeyAuth (apiKey) httpAuth (http)
    */
  def collectionList(apiKey: String, bearerToken: String)(
  ) =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mongodb/collections")
      .contentType("application/json")
      .header("X-AUTH-APIKEY", apiKey)
      .auth
      .bearer(bearerToken)
      .response(asJson[Seq[String]])

  /** Delete Collection
    *
    * Expected answers: code 200 : JsonResultBoolean code 0 : ErrorDescription Headers : x-error-code - Error Code x-error-message - Message of the
    * MongoCampException x-error-additional-info - Additional information for the MongoCampException
    *
    * Available security schemes: apiKeyAuth (apiKey) httpAuth (http)
    *
    * @param collectionName
    *   The name of your MongoDb Collection
    */
  def deleteCollection(apiKey: String, bearerToken: String)(collectionName: String) =
    basicRequest
      .method(Method.DELETE, uri"$baseUrl/mongodb/collections/$collectionName")
      .contentType("application/json")
      .header("X-AUTH-APIKEY", apiKey)
      .auth
      .bearer(bearerToken)
      .response(asJson[JsonResultBoolean])

}

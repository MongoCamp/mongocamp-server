/** mongocamp No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
  *
  * The version of the OpenAPI document: 0.3.1
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech). https://openapi-generator.tech Do not edit the class manually.
  */
package com.quadstingray.mongo.camp.client.api

import com.quadstingray.mongo.camp.client.core.JsonSupport._
import com.quadstingray.mongo.camp.client.model._
import sttp.client3._
import sttp.model.Method

object IndexApi {

  def apply(baseUrl: String = com.quadstingray.mongo.camp.server.TestServer.serverBaseUrl) = new IndexApi(baseUrl)
}

class IndexApi(baseUrl: String) {

  /** Create Index by Field for Collection
    *
    * Expected answers: code 200 : IndexCreateResponse code 400 : String (Invalid value for: query parameter sortAscending, Invalid value for: query parameter
    * name) code 0 : ErrorDescription Headers : x-error-code - Error Code x-error-message - Message of the MongoCampException x-error-additional-info -
    * Additional information for the MongoCampException
    *
    * Available security schemes: apiKeyAuth (apiKey) httpAuth (http)
    *
    * @param collectionName
    *   The name of your MongoDb Collection
    * @param fieldName
    *   The field Name for your index
    * @param duration
    *   Expiring Duration in format 15d (https://www.scala-lang.org/api/2.13.7/scala/concurrent/duration/Duration.html)
    * @param sortAscending
    *   Sort your index ascending
    * @param name
    *   Name for your index
    */
  def createExpiringIndexForField(apiKey: String, bearerToken: String)(
      collectionName: String,
      fieldName: String,
      duration: String,
      sortAscending: Option[Boolean] = None,
      name: Option[String] = None
  ) =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/mongodb/collections/$collectionName/index/field/$fieldName/$duration/expiring?sortAscending=$sortAscending&name=$name")
      .contentType("application/json")
      .header("X-AUTH-APIKEY", apiKey)
      .auth
      .bearer(bearerToken)
      .response(asJson[IndexCreateResponse])

  /** Create Index for Collection
    *
    * Expected answers: code 200 : IndexCreateResponse code 400 : String (Invalid value for: body) code 0 : ErrorDescription Headers : x-error-code - Error Code
    * x-error-message - Message of the MongoCampException x-error-additional-info - Additional information for the MongoCampException
    *
    * Available security schemes: apiKeyAuth (apiKey) httpAuth (http)
    *
    * @param collectionName
    *   The name of your MongoDb Collection
    * @param indexCreateRequest
    */
  def createIndex(
      apiKey: String,
      bearerToken: String
  )(collectionName: String, indexCreateRequest: IndexCreateRequest) =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/mongodb/collections/$collectionName/index")
      .contentType("application/json")
      .header("X-AUTH-APIKEY", apiKey)
      .auth
      .bearer(bearerToken)
      .body(indexCreateRequest)
      .response(asJson[IndexCreateResponse])

  /** Create Index by Field for Collection
    *
    * Expected answers: code 200 : IndexCreateResponse code 400 : String (Invalid value for: query parameter sortAscending, Invalid value for: body) code 0 :
    * ErrorDescription Headers : x-error-code - Error Code x-error-message - Message of the MongoCampException x-error-additional-info - Additional information
    * for the MongoCampException
    *
    * Available security schemes: apiKeyAuth (apiKey) httpAuth (http)
    *
    * @param collectionName
    *   The name of your MongoDb Collection
    * @param fieldName
    *   The field Name for your index
    * @param indexOptionsRequest
    *   @param sortAscending Sort your index ascending
    */
  def createIndexForField(apiKey: String, bearerToken: String)(
      collectionName: String,
      fieldName: String,
      indexOptionsRequest: IndexOptionsRequest,
      sortAscending: Option[Boolean] = None
  ) =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/mongodb/collections/$collectionName/index/field/$fieldName?sortAscending=$sortAscending")
      .contentType("application/json")
      .header("X-AUTH-APIKEY", apiKey)
      .auth
      .bearer(bearerToken)
      .body(indexOptionsRequest)
      .response(asJson[IndexCreateResponse])

  /** Create Index by Field for Collection
    *
    * Expected answers: code 200 : IndexCreateResponse code 400 : String (Invalid value for: body) code 0 : ErrorDescription Headers : x-error-code - Error Code
    * x-error-message - Message of the MongoCampException x-error-additional-info - Additional information for the MongoCampException
    *
    * Available security schemes: apiKeyAuth (apiKey) httpAuth (http)
    *
    * @param collectionName
    *   The name of your MongoDb Collection
    * @param fieldName
    *   The field Name for your index
    * @param indexOptionsRequest
    */
  def createTextIndexForField(apiKey: String, bearerToken: String)(
      collectionName: String,
      fieldName: String,
      indexOptionsRequest: IndexOptionsRequest
  ) =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/mongodb/collections/$collectionName/index/field/$fieldName/text")
      .contentType("application/json")
      .header("X-AUTH-APIKEY", apiKey)
      .auth
      .bearer(bearerToken)
      .body(indexOptionsRequest)
      .response(asJson[IndexCreateResponse])

  /** Create Index by Field for Collection
    *
    * Expected answers: code 200 : IndexCreateResponse code 400 : String (Invalid value for: query parameter sortAscending, Invalid value for: query parameter
    * name) code 0 : ErrorDescription Headers : x-error-code - Error Code x-error-message - Message of the MongoCampException x-error-additional-info -
    * Additional information for the MongoCampException
    *
    * Available security schemes: apiKeyAuth (apiKey) httpAuth (http)
    *
    * @param collectionName
    *   The name of your MongoDb Collection
    * @param fieldName
    *   The field Name for your index
    * @param sortAscending
    *   Sort your index ascending
    * @param name
    *   Name for your index
    */
  def createUniqueIndexForField(apiKey: String, bearerToken: String)(
      collectionName: String,
      fieldName: String,
      sortAscending: Option[Boolean] = None,
      name: Option[String] = None
  ) =
    basicRequest
      .method(Method.PUT, uri"$baseUrl/mongodb/collections/$collectionName/index/field/$fieldName/unique?sortAscending=$sortAscending&name=$name")
      .contentType("application/json")
      .header("X-AUTH-APIKEY", apiKey)
      .auth
      .bearer(bearerToken)
      .response(asJson[IndexCreateResponse])

  /** Delete Index by Name for Collection
    *
    * Expected answers: code 200 : IndexDropResponse code 0 : ErrorDescription Headers : x-error-code - Error Code x-error-message - Message of the
    * MongoCampException x-error-additional-info - Additional information for the MongoCampException
    *
    * Available security schemes: apiKeyAuth (apiKey) httpAuth (http)
    *
    * @param collectionName
    *   The name of your MongoDb Collection
    * @param indexName
    *   The name of your Index
    */
  def deleteIndex(
      apiKey: String,
      bearerToken: String
  )(collectionName: String, indexName: String) =
    basicRequest
      .method(Method.DELETE, uri"$baseUrl/mongodb/collections/$collectionName/index/$indexName")
      .contentType("application/json")
      .header("X-AUTH-APIKEY", apiKey)
      .auth
      .bearer(bearerToken)
      .response(asJson[IndexDropResponse])

  /** Index by Name for Collection
    *
    * Expected answers: code 200 : MongoIndex code 0 : ErrorDescription Headers : x-error-code - Error Code x-error-message - Message of the MongoCampException
    * x-error-additional-info - Additional information for the MongoCampException
    *
    * Available security schemes: apiKeyAuth (apiKey) httpAuth (http)
    *
    * @param collectionName
    *   The name of your MongoDb Collection
    * @param indexName
    *   The name of your Index
    */
  def index(apiKey: String, bearerToken: String)(collectionName: String, indexName: String) =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mongodb/collections/$collectionName/index/$indexName")
      .contentType("application/json")
      .header("X-AUTH-APIKEY", apiKey)
      .auth
      .bearer(bearerToken)
      .response(asJson[MongoIndex])

  /** List all Indices for Collection
    *
    * Expected answers: code 200 : Seq[MongoIndex] code 0 : ErrorDescription Headers : x-error-code - Error Code x-error-message - Message of the
    * MongoCampException x-error-additional-info - Additional information for the MongoCampException
    *
    * Available security schemes: apiKeyAuth (apiKey) httpAuth (http)
    *
    * @param collectionName
    *   The name of your MongoDb Collection
    */
  def indexList(apiKey: String, bearerToken: String)(collectionName: String) =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mongodb/collections/$collectionName/index")
      .contentType("application/json")
      .header("X-AUTH-APIKEY", apiKey)
      .auth
      .bearer(bearerToken)
      .response(asJson[Seq[MongoIndex]])

}
